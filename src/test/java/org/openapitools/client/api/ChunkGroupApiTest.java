/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddChunkToGroupData;
import org.openapitools.client.model.BookmarkData;
import org.openapitools.client.model.BookmarkGroupResult;
import org.openapitools.client.model.ChunkGroup;
import org.openapitools.client.model.CreateChunkGroupData;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.GetGroupsForChunksData;
import org.openapitools.client.model.GroupData;
import org.openapitools.client.model.GroupScoreChunkDTO;
import org.openapitools.client.model.ReccomendGroupChunksRequest;
import org.openapitools.client.model.SearchGroupsResult;
import org.openapitools.client.model.SearchOverGroupsData;
import org.openapitools.client.model.SearchOverGroupsResponseBody;
import org.openapitools.client.model.SearchWithinGroupData;
import java.util.UUID;
import org.openapitools.client.model.UpdateChunkGroupData;
import org.openapitools.client.model.UpdateGroupByTrackingIDData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChunkGroupApi
 */
@Disabled
public class ChunkGroupApiTest {

    private final ChunkGroupApi api = new ChunkGroupApi();

    /**
     * Add Chunk to Group
     *
     * Add Chunk to Group  Route to add a chunk to a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChunkToGroupTest() throws ApiException {
        String trDataset = null;
        UUID groupId = null;
        AddChunkToGroupData addChunkToGroupData = null;
        api.addChunkToGroup(trDataset, groupId, addChunkToGroupData);
        // TODO: test validations
    }

    /**
     * Add Chunk to Group by Tracking ID
     *
     * Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChunkToGroupByTrackingIdTest() throws ApiException {
        String trDataset = null;
        String trackingId = null;
        AddChunkToGroupData addChunkToGroupData = null;
        api.addChunkToGroupByTrackingId(trDataset, trackingId, addChunkToGroupData);
        // TODO: test validations
    }

    /**
     * Create Chunk Group
     *
     * Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChunkGroupTest() throws ApiException {
        String trDataset = null;
        CreateChunkGroupData createChunkGroupData = null;
        ChunkGroup response = api.createChunkGroup(trDataset, createChunkGroupData);
        // TODO: test validations
    }

    /**
     * Delete Group
     *
     * Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChunkGroupTest() throws ApiException {
        String trDataset = null;
        UUID groupId = null;
        Boolean deleteChunks = null;
        api.deleteChunkGroup(trDataset, groupId, deleteChunks);
        // TODO: test validations
    }

    /**
     * Delete Group by Tracking ID
     *
     * Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupByTrackingIdTest() throws ApiException {
        String trDataset = null;
        String trackingId = null;
        api.deleteGroupByTrackingId(trDataset, trackingId);
        // TODO: test validations
    }

    /**
     * Get Group
     *
     * Get Group  Fetch the group with the given id. get_group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChunkGroupTest() throws ApiException {
        String trDataset = null;
        UUID groupId = null;
        ChunkGroup response = api.getChunkGroup(trDataset, groupId);
        // TODO: test validations
    }

    /**
     * Get Chunks in Group
     *
     * Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChunksInGroupTest() throws ApiException {
        String trDataset = null;
        UUID groupId = null;
        Long page = null;
        BookmarkData response = api.getChunksInGroup(trDataset, groupId, page);
        // TODO: test validations
    }

    /**
     * Get Chunks in Group by Tracking ID
     *
     * Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChunksInGroupByTrackingIdTest() throws ApiException {
        String trDataset = null;
        String groupTrackingId = null;
        Long page = null;
        BookmarkData response = api.getChunksInGroupByTrackingId(trDataset, groupTrackingId, page);
        // TODO: test validations
    }

    /**
     * Get Group by Tracking ID
     *
     * Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupByTrackingIdTest() throws ApiException {
        String trDataset = null;
        String trackingId = null;
        ChunkGroup response = api.getGroupByTrackingId(trDataset, trackingId);
        // TODO: test validations
    }

    /**
     * Get Groups for Chunks
     *
     * Get Groups for Chunks  Route to get the groups that a chunk is in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsChunkIsInTest() throws ApiException {
        String trDataset = null;
        GetGroupsForChunksData getGroupsForChunksData = null;
        List<BookmarkGroupResult> response = api.getGroupsChunkIsIn(trDataset, getGroupsForChunksData);
        // TODO: test validations
    }

    /**
     * Get Recommended Groups
     *
     * Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendedGroupsTest() throws ApiException {
        String trDataset = null;
        ReccomendGroupChunksRequest reccomendGroupChunksRequest = null;
        List<GroupScoreChunkDTO> response = api.getRecommendedGroups(trDataset, reccomendGroupChunksRequest);
        // TODO: test validations
    }

    /**
     * Get Groups for Dataset
     *
     * Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificDatasetChunkGroupsTest() throws ApiException {
        String trDataset = null;
        UUID datasetId = null;
        Long page = null;
        GroupData response = api.getSpecificDatasetChunkGroups(trDataset, datasetId, page);
        // TODO: test validations
    }

    /**
     * Remove Chunk from Group
     *
     * Remove Chunk from Group  Route to remove a chunk from a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeChunkFromGroupTest() throws ApiException {
        String trDataset = null;
        UUID groupId = null;
        CreateChunkGroupData createChunkGroupData = null;
        api.removeChunkFromGroup(trDataset, groupId, createChunkGroupData);
        // TODO: test validations
    }

    /**
     * Search Over Groups
     *
     * Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOverGroupsTest() throws ApiException {
        SearchOverGroupsData searchOverGroupsData = null;
        SearchOverGroupsResponseBody response = api.searchOverGroups(searchOverGroupsData);
        // TODO: test validations
    }

    /**
     * Search Within Group
     *
     * Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchWithinGroupTest() throws ApiException {
        String trDataset = null;
        SearchWithinGroupData searchWithinGroupData = null;
        SearchGroupsResult response = api.searchWithinGroup(trDataset, searchWithinGroupData);
        // TODO: test validations
    }

    /**
     * Update Group
     *
     * Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChunkGroupTest() throws ApiException {
        String trDataset = null;
        UpdateChunkGroupData updateChunkGroupData = null;
        api.updateChunkGroup(trDataset, updateChunkGroupData);
        // TODO: test validations
    }

    /**
     * Update Group by Tracking ID
     *
     * Update Group by Tracking ID  Update a chunk_group with the given tracking id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupByTrackingIdTest() throws ApiException {
        String trDataset = null;
        UUID trackingId = null;
        UpdateGroupByTrackingIDData updateGroupByTrackingIDData = null;
        api.updateGroupByTrackingId(trDataset, trackingId, updateGroupByTrackingIDData);
        // TODO: test validations
    }

}
