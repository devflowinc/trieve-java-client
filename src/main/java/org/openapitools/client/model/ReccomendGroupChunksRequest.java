/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ChunkFilter;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReccomendGroupChunksRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class ReccomendGroupChunksRequest {
  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private ChunkFilter filters;

  public static final String SERIALIZED_NAME_GROUP_SIZE = "group_size";
  @SerializedName(SERIALIZED_NAME_GROUP_SIZE)
  private Integer groupSize;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Long limit;

  public static final String SERIALIZED_NAME_NEGATIVE_GROUP_IDS = "negative_group_ids";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_GROUP_IDS)
  private List<UUID> negativeGroupIds;

  public static final String SERIALIZED_NAME_NEGATIVE_GROUP_TRACKING_IDS = "negative_group_tracking_ids";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_GROUP_TRACKING_IDS)
  private List<String> negativeGroupTrackingIds;

  public static final String SERIALIZED_NAME_POSITIVE_GROUP_IDS = "positive_group_ids";
  @SerializedName(SERIALIZED_NAME_POSITIVE_GROUP_IDS)
  private List<UUID> positiveGroupIds;

  public static final String SERIALIZED_NAME_POSITIVE_GROUP_TRACKING_IDS = "positive_group_tracking_ids";
  @SerializedName(SERIALIZED_NAME_POSITIVE_GROUP_TRACKING_IDS)
  private List<String> positiveGroupTrackingIds;

  public ReccomendGroupChunksRequest() {
  }

  public ReccomendGroupChunksRequest filters(ChunkFilter filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @Valid

  public ChunkFilter getFilters() {
    return filters;
  }

  public void setFilters(ChunkFilter filters) {
    this.filters = filters;
  }


  public ReccomendGroupChunksRequest groupSize(Integer groupSize) {
    this.groupSize = groupSize;
    return this;
  }

   /**
   * The number of chunks to fetch for each group. This is the number of chunks which will be returned in the response for each group. The default is 10.
   * minimum: 0
   * @return groupSize
  **/
  @javax.annotation.Nullable
 @Min(0)
  public Integer getGroupSize() {
    return groupSize;
  }

  public void setGroupSize(Integer groupSize) {
    this.groupSize = groupSize;
  }


  public ReccomendGroupChunksRequest limit(Long limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The number of groups to return. This is the number of groups which will be returned in the response. The default is 10.
   * minimum: 0
   * @return limit
  **/
  @javax.annotation.Nullable
 @Min(0L)
  public Long getLimit() {
    return limit;
  }

  public void setLimit(Long limit) {
    this.limit = limit;
  }


  public ReccomendGroupChunksRequest negativeGroupIds(List<UUID> negativeGroupIds) {
    this.negativeGroupIds = negativeGroupIds;
    return this;
  }

  public ReccomendGroupChunksRequest addNegativeGroupIdsItem(UUID negativeGroupIdsItem) {
    if (this.negativeGroupIds == null) {
      this.negativeGroupIds = new ArrayList<>();
    }
    this.negativeGroupIds.add(negativeGroupIdsItem);
    return this;
  }

   /**
   * The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups.
   * @return negativeGroupIds
  **/
  @javax.annotation.Nullable
  @Valid

  public List<UUID> getNegativeGroupIds() {
    return negativeGroupIds;
  }

  public void setNegativeGroupIds(List<UUID> negativeGroupIds) {
    this.negativeGroupIds = negativeGroupIds;
  }


  public ReccomendGroupChunksRequest negativeGroupTrackingIds(List<String> negativeGroupTrackingIds) {
    this.negativeGroupTrackingIds = negativeGroupTrackingIds;
    return this;
  }

  public ReccomendGroupChunksRequest addNegativeGroupTrackingIdsItem(String negativeGroupTrackingIdsItem) {
    if (this.negativeGroupTrackingIds == null) {
      this.negativeGroupTrackingIds = new ArrayList<>();
    }
    this.negativeGroupTrackingIds.add(negativeGroupTrackingIdsItem);
    return this;
  }

   /**
   * The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups.
   * @return negativeGroupTrackingIds
  **/
  @javax.annotation.Nullable

  public List<String> getNegativeGroupTrackingIds() {
    return negativeGroupTrackingIds;
  }

  public void setNegativeGroupTrackingIds(List<String> negativeGroupTrackingIds) {
    this.negativeGroupTrackingIds = negativeGroupTrackingIds;
  }


  public ReccomendGroupChunksRequest positiveGroupIds(List<UUID> positiveGroupIds) {
    this.positiveGroupIds = positiveGroupIds;
    return this;
  }

  public ReccomendGroupChunksRequest addPositiveGroupIdsItem(UUID positiveGroupIdsItem) {
    if (this.positiveGroupIds == null) {
      this.positiveGroupIds = new ArrayList<>();
    }
    this.positiveGroupIds.add(positiveGroupIdsItem);
    return this;
  }

   /**
   * The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups.
   * @return positiveGroupIds
  **/
  @javax.annotation.Nullable
  @Valid

  public List<UUID> getPositiveGroupIds() {
    return positiveGroupIds;
  }

  public void setPositiveGroupIds(List<UUID> positiveGroupIds) {
    this.positiveGroupIds = positiveGroupIds;
  }


  public ReccomendGroupChunksRequest positiveGroupTrackingIds(List<String> positiveGroupTrackingIds) {
    this.positiveGroupTrackingIds = positiveGroupTrackingIds;
    return this;
  }

  public ReccomendGroupChunksRequest addPositiveGroupTrackingIdsItem(String positiveGroupTrackingIdsItem) {
    if (this.positiveGroupTrackingIds == null) {
      this.positiveGroupTrackingIds = new ArrayList<>();
    }
    this.positiveGroupTrackingIds.add(positiveGroupTrackingIdsItem);
    return this;
  }

   /**
   * The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups.
   * @return positiveGroupTrackingIds
  **/
  @javax.annotation.Nullable

  public List<String> getPositiveGroupTrackingIds() {
    return positiveGroupTrackingIds;
  }

  public void setPositiveGroupTrackingIds(List<String> positiveGroupTrackingIds) {
    this.positiveGroupTrackingIds = positiveGroupTrackingIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReccomendGroupChunksRequest reccomendGroupChunksRequest = (ReccomendGroupChunksRequest) o;
    return Objects.equals(this.filters, reccomendGroupChunksRequest.filters) &&
        Objects.equals(this.groupSize, reccomendGroupChunksRequest.groupSize) &&
        Objects.equals(this.limit, reccomendGroupChunksRequest.limit) &&
        Objects.equals(this.negativeGroupIds, reccomendGroupChunksRequest.negativeGroupIds) &&
        Objects.equals(this.negativeGroupTrackingIds, reccomendGroupChunksRequest.negativeGroupTrackingIds) &&
        Objects.equals(this.positiveGroupIds, reccomendGroupChunksRequest.positiveGroupIds) &&
        Objects.equals(this.positiveGroupTrackingIds, reccomendGroupChunksRequest.positiveGroupTrackingIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, groupSize, limit, negativeGroupIds, negativeGroupTrackingIds, positiveGroupIds, positiveGroupTrackingIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReccomendGroupChunksRequest {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    groupSize: ").append(toIndentedString(groupSize)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    negativeGroupIds: ").append(toIndentedString(negativeGroupIds)).append("\n");
    sb.append("    negativeGroupTrackingIds: ").append(toIndentedString(negativeGroupTrackingIds)).append("\n");
    sb.append("    positiveGroupIds: ").append(toIndentedString(positiveGroupIds)).append("\n");
    sb.append("    positiveGroupTrackingIds: ").append(toIndentedString(positiveGroupTrackingIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filters");
    openapiFields.add("group_size");
    openapiFields.add("limit");
    openapiFields.add("negative_group_ids");
    openapiFields.add("negative_group_tracking_ids");
    openapiFields.add("positive_group_ids");
    openapiFields.add("positive_group_tracking_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReccomendGroupChunksRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReccomendGroupChunksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReccomendGroupChunksRequest is not found in the empty JSON string", ReccomendGroupChunksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReccomendGroupChunksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReccomendGroupChunksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        ChunkFilter.validateJsonElement(jsonObj.get("filters"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("negative_group_ids") != null && !jsonObj.get("negative_group_ids").isJsonNull() && !jsonObj.get("negative_group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `negative_group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("negative_group_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("negative_group_tracking_ids") != null && !jsonObj.get("negative_group_tracking_ids").isJsonNull() && !jsonObj.get("negative_group_tracking_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `negative_group_tracking_ids` to be an array in the JSON string but got `%s`", jsonObj.get("negative_group_tracking_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positive_group_ids") != null && !jsonObj.get("positive_group_ids").isJsonNull() && !jsonObj.get("positive_group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positive_group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("positive_group_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positive_group_tracking_ids") != null && !jsonObj.get("positive_group_tracking_ids").isJsonNull() && !jsonObj.get("positive_group_tracking_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positive_group_tracking_ids` to be an array in the JSON string but got `%s`", jsonObj.get("positive_group_tracking_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReccomendGroupChunksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReccomendGroupChunksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReccomendGroupChunksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReccomendGroupChunksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReccomendGroupChunksRequest>() {
           @Override
           public void write(JsonWriter out, ReccomendGroupChunksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReccomendGroupChunksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReccomendGroupChunksRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReccomendGroupChunksRequest
  * @throws IOException if the JSON string is invalid with respect to ReccomendGroupChunksRequest
  */
  public static ReccomendGroupChunksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReccomendGroupChunksRequest.class);
  }

 /**
  * Convert an instance of ReccomendGroupChunksRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

