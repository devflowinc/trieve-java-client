/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateChunkByTrackingIdData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class UpdateChunkByTrackingIdData {
  public static final String SERIALIZED_NAME_CHUNK_HTML = "chunk_html";
  @SerializedName(SERIALIZED_NAME_CHUNK_HTML)
  private String chunkHtml;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<UUID> groupIds;

  public static final String SERIALIZED_NAME_GROUP_TRACKING_IDS = "group_tracking_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_TRACKING_IDS)
  private List<String> groupTrackingIds;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_TIME_STAMP = "time_stamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_TRACKING_ID = "tracking_id";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public UpdateChunkByTrackingIdData() {
  }

  public UpdateChunkByTrackingIdData chunkHtml(String chunkHtml) {
    this.chunkHtml = chunkHtml;
    return this;
  }

   /**
   * HTML content of the chunk you want to update. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content. If no chunk_html is provided, the existing chunk_html will be used.
   * @return chunkHtml
  **/
  @javax.annotation.Nullable

  public String getChunkHtml() {
    return chunkHtml;
  }

  public void setChunkHtml(String chunkHtml) {
    this.chunkHtml = chunkHtml;
  }


  public UpdateChunkByTrackingIdData groupIds(List<UUID> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public UpdateChunkByTrackingIdData addGroupIdsItem(UUID groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

   /**
   * Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
   * @return groupIds
  **/
  @javax.annotation.Nullable
  @Valid

  public List<UUID> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(List<UUID> groupIds) {
    this.groupIds = groupIds;
  }


  public UpdateChunkByTrackingIdData groupTrackingIds(List<String> groupTrackingIds) {
    this.groupTrackingIds = groupTrackingIds;
    return this;
  }

  public UpdateChunkByTrackingIdData addGroupTrackingIdsItem(String groupTrackingIdsItem) {
    if (this.groupTrackingIds == null) {
      this.groupTrackingIds = new ArrayList<>();
    }
    this.groupTrackingIds.add(groupTrackingIdsItem);
    return this;
  }

   /**
   * Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
   * @return groupTrackingIds
  **/
  @javax.annotation.Nullable

  public List<String> getGroupTrackingIds() {
    return groupTrackingIds;
  }

  public void setGroupTrackingIds(List<String> groupTrackingIds) {
    this.groupTrackingIds = groupTrackingIds;
  }


  public UpdateChunkByTrackingIdData link(String link) {
    this.link = link;
    return this;
  }

   /**
   * Link of the chunk you want to update. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation. If no link is provided, the existing link will be used.
   * @return link
  **/
  @javax.annotation.Nullable

  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public UpdateChunkByTrackingIdData metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. If no metadata is provided, the existing metadata will be used.
   * @return metadata
  **/
  @javax.annotation.Nullable

  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public UpdateChunkByTrackingIdData timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results. If no time_stamp is provided, the existing time_stamp will be used.
   * @return timeStamp
  **/
  @javax.annotation.Nullable

  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public UpdateChunkByTrackingIdData trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

   /**
   * Tracking_id of the chunk you want to update. This is required to match an existing chunk.
   * @return trackingId
  **/
  @javax.annotation.Nonnull
  @NotNull

  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }


  public UpdateChunkByTrackingIdData weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset. If no weight is provided, the existing weight will be used.
   * @return weight
  **/
  @javax.annotation.Nullable

  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateChunkByTrackingIdData updateChunkByTrackingIdData = (UpdateChunkByTrackingIdData) o;
    return Objects.equals(this.chunkHtml, updateChunkByTrackingIdData.chunkHtml) &&
        Objects.equals(this.groupIds, updateChunkByTrackingIdData.groupIds) &&
        Objects.equals(this.groupTrackingIds, updateChunkByTrackingIdData.groupTrackingIds) &&
        Objects.equals(this.link, updateChunkByTrackingIdData.link) &&
        Objects.equals(this.metadata, updateChunkByTrackingIdData.metadata) &&
        Objects.equals(this.timeStamp, updateChunkByTrackingIdData.timeStamp) &&
        Objects.equals(this.trackingId, updateChunkByTrackingIdData.trackingId) &&
        Objects.equals(this.weight, updateChunkByTrackingIdData.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chunkHtml, groupIds, groupTrackingIds, link, metadata, timeStamp, trackingId, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateChunkByTrackingIdData {\n");
    sb.append("    chunkHtml: ").append(toIndentedString(chunkHtml)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    groupTrackingIds: ").append(toIndentedString(groupTrackingIds)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chunk_html");
    openapiFields.add("group_ids");
    openapiFields.add("group_tracking_ids");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("time_stamp");
    openapiFields.add("tracking_id");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tracking_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateChunkByTrackingIdData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateChunkByTrackingIdData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateChunkByTrackingIdData is not found in the empty JSON string", UpdateChunkByTrackingIdData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateChunkByTrackingIdData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateChunkByTrackingIdData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateChunkByTrackingIdData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chunk_html") != null && !jsonObj.get("chunk_html").isJsonNull()) && !jsonObj.get("chunk_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chunk_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chunk_html").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull() && !jsonObj.get("group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_tracking_ids") != null && !jsonObj.get("group_tracking_ids").isJsonNull() && !jsonObj.get("group_tracking_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_tracking_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_tracking_ids").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("time_stamp") != null && !jsonObj.get("time_stamp").isJsonNull()) && !jsonObj.get("time_stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_stamp").toString()));
      }
      if (!jsonObj.get("tracking_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateChunkByTrackingIdData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateChunkByTrackingIdData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateChunkByTrackingIdData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateChunkByTrackingIdData.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateChunkByTrackingIdData>() {
           @Override
           public void write(JsonWriter out, UpdateChunkByTrackingIdData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateChunkByTrackingIdData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateChunkByTrackingIdData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateChunkByTrackingIdData
  * @throws IOException if the JSON string is invalid with respect to UpdateChunkByTrackingIdData
  */
  public static UpdateChunkByTrackingIdData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateChunkByTrackingIdData.class);
  }

 /**
  * Convert an instance of UpdateChunkByTrackingIdData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

