/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ChunkFilter;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecommendChunksRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class RecommendChunksRequest {
  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private ChunkFilter filters;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Long limit;

  public static final String SERIALIZED_NAME_NEGATIVE_CHUNK_IDS = "negative_chunk_ids";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_CHUNK_IDS)
  private List<UUID> negativeChunkIds;

  public static final String SERIALIZED_NAME_NEGATIVE_TRACKING_IDS = "negative_tracking_ids";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_TRACKING_IDS)
  private List<String> negativeTrackingIds;

  public static final String SERIALIZED_NAME_POSITIVE_CHUNK_IDS = "positive_chunk_ids";
  @SerializedName(SERIALIZED_NAME_POSITIVE_CHUNK_IDS)
  private List<UUID> positiveChunkIds;

  public static final String SERIALIZED_NAME_POSITIVE_TRACKING_IDS = "positive_tracking_ids";
  @SerializedName(SERIALIZED_NAME_POSITIVE_TRACKING_IDS)
  private List<String> positiveTrackingIds;

  public RecommendChunksRequest() {
  }

  public RecommendChunksRequest filters(ChunkFilter filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @Valid

  public ChunkFilter getFilters() {
    return filters;
  }

  public void setFilters(ChunkFilter filters) {
    this.filters = filters;
  }


  public RecommendChunksRequest limit(Long limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The number of chunks to return. This is the number of chunks which will be returned in the response. The default is 10.
   * minimum: 0
   * @return limit
  **/
  @javax.annotation.Nullable
 @Min(0L)
  public Long getLimit() {
    return limit;
  }

  public void setLimit(Long limit) {
    this.limit = limit;
  }


  public RecommendChunksRequest negativeChunkIds(List<UUID> negativeChunkIds) {
    this.negativeChunkIds = negativeChunkIds;
    return this;
  }

  public RecommendChunksRequest addNegativeChunkIdsItem(UUID negativeChunkIdsItem) {
    if (this.negativeChunkIds == null) {
      this.negativeChunkIds = new ArrayList<>();
    }
    this.negativeChunkIds.add(negativeChunkIdsItem);
    return this;
  }

   /**
   * The ids of the chunks to be used as negative examples for the recommendation. The chunks in this array will be used to filter out similar chunks.
   * @return negativeChunkIds
  **/
  @javax.annotation.Nullable
  @Valid

  public List<UUID> getNegativeChunkIds() {
    return negativeChunkIds;
  }

  public void setNegativeChunkIds(List<UUID> negativeChunkIds) {
    this.negativeChunkIds = negativeChunkIds;
  }


  public RecommendChunksRequest negativeTrackingIds(List<String> negativeTrackingIds) {
    this.negativeTrackingIds = negativeTrackingIds;
    return this;
  }

  public RecommendChunksRequest addNegativeTrackingIdsItem(String negativeTrackingIdsItem) {
    if (this.negativeTrackingIds == null) {
      this.negativeTrackingIds = new ArrayList<>();
    }
    this.negativeTrackingIds.add(negativeTrackingIdsItem);
    return this;
  }

   /**
   * The tracking_ids of the chunks to be used as negative examples for the recommendation. The chunks in this array will be used to filter out similar chunks.
   * @return negativeTrackingIds
  **/
  @javax.annotation.Nullable

  public List<String> getNegativeTrackingIds() {
    return negativeTrackingIds;
  }

  public void setNegativeTrackingIds(List<String> negativeTrackingIds) {
    this.negativeTrackingIds = negativeTrackingIds;
  }


  public RecommendChunksRequest positiveChunkIds(List<UUID> positiveChunkIds) {
    this.positiveChunkIds = positiveChunkIds;
    return this;
  }

  public RecommendChunksRequest addPositiveChunkIdsItem(UUID positiveChunkIdsItem) {
    if (this.positiveChunkIds == null) {
      this.positiveChunkIds = new ArrayList<>();
    }
    this.positiveChunkIds.add(positiveChunkIdsItem);
    return this;
  }

   /**
   * The ids of the chunks to be used as positive examples for the recommendation. The chunks in this array will be used to find similar chunks.
   * @return positiveChunkIds
  **/
  @javax.annotation.Nullable
  @Valid

  public List<UUID> getPositiveChunkIds() {
    return positiveChunkIds;
  }

  public void setPositiveChunkIds(List<UUID> positiveChunkIds) {
    this.positiveChunkIds = positiveChunkIds;
  }


  public RecommendChunksRequest positiveTrackingIds(List<String> positiveTrackingIds) {
    this.positiveTrackingIds = positiveTrackingIds;
    return this;
  }

  public RecommendChunksRequest addPositiveTrackingIdsItem(String positiveTrackingIdsItem) {
    if (this.positiveTrackingIds == null) {
      this.positiveTrackingIds = new ArrayList<>();
    }
    this.positiveTrackingIds.add(positiveTrackingIdsItem);
    return this;
  }

   /**
   * The tracking_ids of the chunks to be used as positive examples for the recommendation. The chunks in this array will be used to find similar chunks.
   * @return positiveTrackingIds
  **/
  @javax.annotation.Nullable

  public List<String> getPositiveTrackingIds() {
    return positiveTrackingIds;
  }

  public void setPositiveTrackingIds(List<String> positiveTrackingIds) {
    this.positiveTrackingIds = positiveTrackingIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendChunksRequest recommendChunksRequest = (RecommendChunksRequest) o;
    return Objects.equals(this.filters, recommendChunksRequest.filters) &&
        Objects.equals(this.limit, recommendChunksRequest.limit) &&
        Objects.equals(this.negativeChunkIds, recommendChunksRequest.negativeChunkIds) &&
        Objects.equals(this.negativeTrackingIds, recommendChunksRequest.negativeTrackingIds) &&
        Objects.equals(this.positiveChunkIds, recommendChunksRequest.positiveChunkIds) &&
        Objects.equals(this.positiveTrackingIds, recommendChunksRequest.positiveTrackingIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, limit, negativeChunkIds, negativeTrackingIds, positiveChunkIds, positiveTrackingIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendChunksRequest {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    negativeChunkIds: ").append(toIndentedString(negativeChunkIds)).append("\n");
    sb.append("    negativeTrackingIds: ").append(toIndentedString(negativeTrackingIds)).append("\n");
    sb.append("    positiveChunkIds: ").append(toIndentedString(positiveChunkIds)).append("\n");
    sb.append("    positiveTrackingIds: ").append(toIndentedString(positiveTrackingIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filters");
    openapiFields.add("limit");
    openapiFields.add("negative_chunk_ids");
    openapiFields.add("negative_tracking_ids");
    openapiFields.add("positive_chunk_ids");
    openapiFields.add("positive_tracking_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecommendChunksRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendChunksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendChunksRequest is not found in the empty JSON string", RecommendChunksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendChunksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendChunksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        ChunkFilter.validateJsonElement(jsonObj.get("filters"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("negative_chunk_ids") != null && !jsonObj.get("negative_chunk_ids").isJsonNull() && !jsonObj.get("negative_chunk_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `negative_chunk_ids` to be an array in the JSON string but got `%s`", jsonObj.get("negative_chunk_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("negative_tracking_ids") != null && !jsonObj.get("negative_tracking_ids").isJsonNull() && !jsonObj.get("negative_tracking_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `negative_tracking_ids` to be an array in the JSON string but got `%s`", jsonObj.get("negative_tracking_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positive_chunk_ids") != null && !jsonObj.get("positive_chunk_ids").isJsonNull() && !jsonObj.get("positive_chunk_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positive_chunk_ids` to be an array in the JSON string but got `%s`", jsonObj.get("positive_chunk_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positive_tracking_ids") != null && !jsonObj.get("positive_tracking_ids").isJsonNull() && !jsonObj.get("positive_tracking_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positive_tracking_ids` to be an array in the JSON string but got `%s`", jsonObj.get("positive_tracking_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendChunksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendChunksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendChunksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendChunksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendChunksRequest>() {
           @Override
           public void write(JsonWriter out, RecommendChunksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendChunksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecommendChunksRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecommendChunksRequest
  * @throws IOException if the JSON string is invalid with respect to RecommendChunksRequest
  */
  public static RecommendChunksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendChunksRequest.class);
  }

 /**
  * Convert an instance of RecommendChunksRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

