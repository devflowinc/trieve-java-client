/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChunkData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:28:22.088024700-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class ChunkData {
  public static final String SERIALIZED_NAME_CHUNK_HTML = "chunk_html";
  @SerializedName(SERIALIZED_NAME_CHUNK_HTML)
  private String chunkHtml;

  public static final String SERIALIZED_NAME_CHUNK_VECTOR = "chunk_vector";
  @SerializedName(SERIALIZED_NAME_CHUNK_VECTOR)
  private List<Float> chunkVector;

  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private UUID fileId;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<UUID> groupIds;

  public static final String SERIALIZED_NAME_GROUP_TRACKING_IDS = "group_tracking_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_TRACKING_IDS)
  private List<String> groupTrackingIds;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_SPLIT_AVG = "split_avg";
  @SerializedName(SERIALIZED_NAME_SPLIT_AVG)
  private Boolean splitAvg;

  public static final String SERIALIZED_NAME_TAG_SET = "tag_set";
  @SerializedName(SERIALIZED_NAME_TAG_SET)
  private List<String> tagSet;

  public static final String SERIALIZED_NAME_TIME_STAMP = "time_stamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_TRACKING_ID = "tracking_id";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public static final String SERIALIZED_NAME_UPSERT_BY_TRACKING_ID = "upsert_by_tracking_id";
  @SerializedName(SERIALIZED_NAME_UPSERT_BY_TRACKING_ID)
  private Boolean upsertByTrackingId;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public ChunkData() {
  }

  public ChunkData chunkHtml(String chunkHtml) {
    this.chunkHtml = chunkHtml;
    return this;
  }

   /**
   * HTML content of the chunk. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content.
   * @return chunkHtml
  **/
  @javax.annotation.Nullable

  public String getChunkHtml() {
    return chunkHtml;
  }

  public void setChunkHtml(String chunkHtml) {
    this.chunkHtml = chunkHtml;
  }


  public ChunkData chunkVector(List<Float> chunkVector) {
    this.chunkVector = chunkVector;
    return this;
  }

  public ChunkData addChunkVectorItem(Float chunkVectorItem) {
    if (this.chunkVector == null) {
      this.chunkVector = new ArrayList<>();
    }
    this.chunkVector.add(chunkVectorItem);
    return this;
  }

   /**
   * Chunk_vector is a vector of floats which can be used instead of generating a new embedding. This is useful for when you are using a pre-embedded dataset. If this is not provided, the innerText of the chunk_html will be used to create the embedding.
   * @return chunkVector
  **/
  @javax.annotation.Nullable

  public List<Float> getChunkVector() {
    return chunkVector;
  }

  public void setChunkVector(List<Float> chunkVector) {
    this.chunkVector = chunkVector;
  }


  public ChunkData fileId(UUID fileId) {
    this.fileId = fileId;
    return this;
  }

   /**
   * File_uuid is the uuid of the file that the chunk is associated with. This is used to associate chunks with files. This is useful for when you want to delete a file and all of its associated chunks.
   * @return fileId
  **/
  @javax.annotation.Nullable
  @Valid

  public UUID getFileId() {
    return fileId;
  }

  public void setFileId(UUID fileId) {
    this.fileId = fileId;
  }


  public ChunkData groupIds(List<UUID> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public ChunkData addGroupIdsItem(UUID groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

   /**
   * Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response.
   * @return groupIds
  **/
  @javax.annotation.Nullable
  @Valid

  public List<UUID> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(List<UUID> groupIds) {
    this.groupIds = groupIds;
  }


  public ChunkData groupTrackingIds(List<String> groupTrackingIds) {
    this.groupTrackingIds = groupTrackingIds;
    return this;
  }

  public ChunkData addGroupTrackingIdsItem(String groupTrackingIdsItem) {
    if (this.groupTrackingIds == null) {
      this.groupTrackingIds = new ArrayList<>();
    }
    this.groupTrackingIds.add(groupTrackingIdsItem);
    return this;
  }

   /**
   * Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response.
   * @return groupTrackingIds
  **/
  @javax.annotation.Nullable

  public List<String> getGroupTrackingIds() {
    return groupTrackingIds;
  }

  public void setGroupTrackingIds(List<String> groupTrackingIds) {
    this.groupTrackingIds = groupTrackingIds;
  }


  public ChunkData link(String link) {
    this.link = link;
    return this;
  }

   /**
   * Link to the chunk. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation.
   * @return link
  **/
  @javax.annotation.Nullable

  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ChunkData metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata.
   * @return metadata
  **/
  @javax.annotation.Nullable

  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public ChunkData splitAvg(Boolean splitAvg) {
    this.splitAvg = splitAvg;
    return this;
  }

   /**
   * Split avg is a boolean which tells the server to split the text in the chunk_html into smaller chunks and average their resulting vectors. This is useful for when you want to create a chunk from a large piece of text and want to split it into smaller chunks to create a more fuzzy average dense vector. The sparse vector will be generated normally with no averaging. By default this is false.
   * @return splitAvg
  **/
  @javax.annotation.Nullable

  public Boolean getSplitAvg() {
    return splitAvg;
  }

  public void setSplitAvg(Boolean splitAvg) {
    this.splitAvg = splitAvg;
  }


  public ChunkData tagSet(List<String> tagSet) {
    this.tagSet = tagSet;
    return this;
  }

  public ChunkData addTagSetItem(String tagSetItem) {
    if (this.tagSet == null) {
      this.tagSet = new ArrayList<>();
    }
    this.tagSet.add(tagSetItem);
    return this;
  }

   /**
   * Tag set is a list of tags. This can be used to filter chunks by tag. Unlike with metadata filtering, HNSW indices will exist for each tag such that there is not a performance hit for filtering on them.
   * @return tagSet
  **/
  @javax.annotation.Nullable

  public List<String> getTagSet() {
    return tagSet;
  }

  public void setTagSet(List<String> tagSet) {
    this.tagSet = tagSet;
  }


  public ChunkData timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results.
   * @return timeStamp
  **/
  @javax.annotation.Nullable

  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public ChunkData trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

   /**
   * Tracking_id is a string which can be used to identify a chunk. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk.
   * @return trackingId
  **/
  @javax.annotation.Nullable

  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }


  public ChunkData upsertByTrackingId(Boolean upsertByTrackingId) {
    this.upsertByTrackingId = upsertByTrackingId;
    return this;
  }

   /**
   * Upsert when a chunk with the same tracking_id exists. By default this is false, and the request will fail if a chunk with the same tracking_id exists. If this is true, the chunk will be updated if a chunk with the same tracking_id exists.
   * @return upsertByTrackingId
  **/
  @javax.annotation.Nullable

  public Boolean getUpsertByTrackingId() {
    return upsertByTrackingId;
  }

  public void setUpsertByTrackingId(Boolean upsertByTrackingId) {
    this.upsertByTrackingId = upsertByTrackingId;
  }


  public ChunkData weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset.
   * @return weight
  **/
  @javax.annotation.Nullable

  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChunkData chunkData = (ChunkData) o;
    return Objects.equals(this.chunkHtml, chunkData.chunkHtml) &&
        Objects.equals(this.chunkVector, chunkData.chunkVector) &&
        Objects.equals(this.fileId, chunkData.fileId) &&
        Objects.equals(this.groupIds, chunkData.groupIds) &&
        Objects.equals(this.groupTrackingIds, chunkData.groupTrackingIds) &&
        Objects.equals(this.link, chunkData.link) &&
        Objects.equals(this.metadata, chunkData.metadata) &&
        Objects.equals(this.splitAvg, chunkData.splitAvg) &&
        Objects.equals(this.tagSet, chunkData.tagSet) &&
        Objects.equals(this.timeStamp, chunkData.timeStamp) &&
        Objects.equals(this.trackingId, chunkData.trackingId) &&
        Objects.equals(this.upsertByTrackingId, chunkData.upsertByTrackingId) &&
        Objects.equals(this.weight, chunkData.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chunkHtml, chunkVector, fileId, groupIds, groupTrackingIds, link, metadata, splitAvg, tagSet, timeStamp, trackingId, upsertByTrackingId, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChunkData {\n");
    sb.append("    chunkHtml: ").append(toIndentedString(chunkHtml)).append("\n");
    sb.append("    chunkVector: ").append(toIndentedString(chunkVector)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    groupTrackingIds: ").append(toIndentedString(groupTrackingIds)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    splitAvg: ").append(toIndentedString(splitAvg)).append("\n");
    sb.append("    tagSet: ").append(toIndentedString(tagSet)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    upsertByTrackingId: ").append(toIndentedString(upsertByTrackingId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chunk_html");
    openapiFields.add("chunk_vector");
    openapiFields.add("file_id");
    openapiFields.add("group_ids");
    openapiFields.add("group_tracking_ids");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("split_avg");
    openapiFields.add("tag_set");
    openapiFields.add("time_stamp");
    openapiFields.add("tracking_id");
    openapiFields.add("upsert_by_tracking_id");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChunkData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChunkData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChunkData is not found in the empty JSON string", ChunkData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChunkData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChunkData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chunk_html") != null && !jsonObj.get("chunk_html").isJsonNull()) && !jsonObj.get("chunk_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chunk_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chunk_html").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("chunk_vector") != null && !jsonObj.get("chunk_vector").isJsonNull() && !jsonObj.get("chunk_vector").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chunk_vector` to be an array in the JSON string but got `%s`", jsonObj.get("chunk_vector").toString()));
      }
      if ((jsonObj.get("file_id") != null && !jsonObj.get("file_id").isJsonNull()) && !jsonObj.get("file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull() && !jsonObj.get("group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_tracking_ids") != null && !jsonObj.get("group_tracking_ids").isJsonNull() && !jsonObj.get("group_tracking_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_tracking_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_tracking_ids").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag_set") != null && !jsonObj.get("tag_set").isJsonNull() && !jsonObj.get("tag_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_set` to be an array in the JSON string but got `%s`", jsonObj.get("tag_set").toString()));
      }
      if ((jsonObj.get("time_stamp") != null && !jsonObj.get("time_stamp").isJsonNull()) && !jsonObj.get("time_stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_stamp").toString()));
      }
      if ((jsonObj.get("tracking_id") != null && !jsonObj.get("tracking_id").isJsonNull()) && !jsonObj.get("tracking_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChunkData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChunkData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChunkData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChunkData.class));

       return (TypeAdapter<T>) new TypeAdapter<ChunkData>() {
           @Override
           public void write(JsonWriter out, ChunkData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChunkData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChunkData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChunkData
  * @throws IOException if the JSON string is invalid with respect to ChunkData
  */
  public static ChunkData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChunkData.class);
  }

 /**
  * Convert an instance of ChunkData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

