/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.UserOrganization;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlimUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:28:22.088024700-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class SlimUser {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGS = "orgs";
  @SerializedName(SERIALIZED_NAME_ORGS)
  private List<@Valid Organization> orgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ORGS = "user_orgs";
  @SerializedName(SERIALIZED_NAME_USER_ORGS)
  private List<@Valid UserOrganization> userOrgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VISIBLE_EMAIL = "visible_email";
  @SerializedName(SERIALIZED_NAME_VISIBLE_EMAIL)
  private Boolean visibleEmail;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public SlimUser() {
  }

  public SlimUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @NotNull

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SlimUser id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid

  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SlimUser name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SlimUser orgs(List<@Valid Organization> orgs) {
    this.orgs = orgs;
    return this;
  }

  public SlimUser addOrgsItem(Organization orgsItem) {
    if (this.orgs == null) {
      this.orgs = new ArrayList<>();
    }
    this.orgs.add(orgsItem);
    return this;
  }

   /**
   * Get orgs
   * @return orgs
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid

  public List<@Valid Organization> getOrgs() {
    return orgs;
  }

  public void setOrgs(List<@Valid Organization> orgs) {
    this.orgs = orgs;
  }


  public SlimUser userOrgs(List<@Valid UserOrganization> userOrgs) {
    this.userOrgs = userOrgs;
    return this;
  }

  public SlimUser addUserOrgsItem(UserOrganization userOrgsItem) {
    if (this.userOrgs == null) {
      this.userOrgs = new ArrayList<>();
    }
    this.userOrgs.add(userOrgsItem);
    return this;
  }

   /**
   * Get userOrgs
   * @return userOrgs
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid

  public List<@Valid UserOrganization> getUserOrgs() {
    return userOrgs;
  }

  public void setUserOrgs(List<@Valid UserOrganization> userOrgs) {
    this.userOrgs = userOrgs;
  }


  public SlimUser username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public SlimUser visibleEmail(Boolean visibleEmail) {
    this.visibleEmail = visibleEmail;
    return this;
  }

   /**
   * Get visibleEmail
   * @return visibleEmail
  **/
  @javax.annotation.Nonnull
  @NotNull

  public Boolean getVisibleEmail() {
    return visibleEmail;
  }

  public void setVisibleEmail(Boolean visibleEmail) {
    this.visibleEmail = visibleEmail;
  }


  public SlimUser website(String website) {
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @javax.annotation.Nullable

  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlimUser slimUser = (SlimUser) o;
    return Objects.equals(this.email, slimUser.email) &&
        Objects.equals(this.id, slimUser.id) &&
        Objects.equals(this.name, slimUser.name) &&
        Objects.equals(this.orgs, slimUser.orgs) &&
        Objects.equals(this.userOrgs, slimUser.userOrgs) &&
        Objects.equals(this.username, slimUser.username) &&
        Objects.equals(this.visibleEmail, slimUser.visibleEmail) &&
        Objects.equals(this.website, slimUser.website);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, id, name, orgs, userOrgs, username, visibleEmail, website);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlimUser {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgs: ").append(toIndentedString(orgs)).append("\n");
    sb.append("    userOrgs: ").append(toIndentedString(userOrgs)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    visibleEmail: ").append(toIndentedString(visibleEmail)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("orgs");
    openapiFields.add("user_orgs");
    openapiFields.add("username");
    openapiFields.add("visible_email");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orgs");
    openapiRequiredFields.add("user_orgs");
    openapiRequiredFields.add("visible_email");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SlimUser
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlimUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlimUser is not found in the empty JSON string", SlimUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlimUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlimUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SlimUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("orgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgs` to be an array in the JSON string but got `%s`", jsonObj.get("orgs").toString()));
      }

      JsonArray jsonArrayorgs = jsonObj.getAsJsonArray("orgs");
      // validate the required field `orgs` (array)
      for (int i = 0; i < jsonArrayorgs.size(); i++) {
        Organization.validateJsonElement(jsonArrayorgs.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("user_orgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_orgs` to be an array in the JSON string but got `%s`", jsonObj.get("user_orgs").toString()));
      }

      JsonArray jsonArrayuserOrgs = jsonObj.getAsJsonArray("user_orgs");
      // validate the required field `user_orgs` (array)
      for (int i = 0; i < jsonArrayuserOrgs.size(); i++) {
        UserOrganization.validateJsonElement(jsonArrayuserOrgs.get(i));
      };
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlimUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlimUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlimUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlimUser.class));

       return (TypeAdapter<T>) new TypeAdapter<SlimUser>() {
           @Override
           public void write(JsonWriter out, SlimUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlimUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SlimUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SlimUser
  * @throws IOException if the JSON string is invalid with respect to SlimUser
  */
  public static SlimUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlimUser.class);
  }

 /**
  * Convert an instance of SlimUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

