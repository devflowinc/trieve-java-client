/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadFileData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class UploadFileData {
  public static final String SERIALIZED_NAME_BASE64_FILE = "base64_file";
  @SerializedName(SERIALIZED_NAME_BASE64_FILE)
  private String base64File;

  public static final String SERIALIZED_NAME_CREATE_CHUNKS = "create_chunks";
  @SerializedName(SERIALIZED_NAME_CREATE_CHUNKS)
  private Boolean createChunks;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILE_MIME_TYPE = "file_mime_type";
  @SerializedName(SERIALIZED_NAME_FILE_MIME_TYPE)
  private String fileMimeType;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_TAG_SET = "tag_set";
  @SerializedName(SERIALIZED_NAME_TAG_SET)
  private List<String> tagSet;

  public static final String SERIALIZED_NAME_TIME_STAMP = "time_stamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public UploadFileData() {
  }

  public UploadFileData base64File(String base64File) {
    this.base64File = base64File;
    return this;
  }

   /**
   * Base64 encoded file. Convert + to -, / to _, and remove the ending &#x3D; if present. This is the standard base64url encoding.
   * @return base64File
  **/
  @javax.annotation.Nonnull
  @NotNull

  public String getBase64File() {
    return base64File;
  }

  public void setBase64File(String base64File) {
    this.base64File = base64File;
  }


  public UploadFileData createChunks(Boolean createChunks) {
    this.createChunks = createChunks;
    return this;
  }

   /**
   * Create chunks is a boolean which determines whether or not to create chunks from the file. If false, you can manually chunk the file and send the chunks to the create_chunk endpoint with the file_id to associate chunks with the file. Meant mostly for advanced users.
   * @return createChunks
  **/
  @javax.annotation.Nullable

  public Boolean getCreateChunks() {
    return createChunks;
  }

  public void setCreateChunks(Boolean createChunks) {
    this.createChunks = createChunks;
  }


  public UploadFileData description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description is an optional convience field so you do not have to remember what the file contains or is about. It will be included on the group resulting from the file which will hold its chunk.
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UploadFileData fileMimeType(String fileMimeType) {
    this.fileMimeType = fileMimeType;
    return this;
  }

   /**
   * MIME type of the file being uploaded.
   * @return fileMimeType
  **/
  @javax.annotation.Nonnull
  @NotNull

  public String getFileMimeType() {
    return fileMimeType;
  }

  public void setFileMimeType(String fileMimeType) {
    this.fileMimeType = fileMimeType;
  }


  public UploadFileData fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Name of the file being uploaded, including the extension.
   * @return fileName
  **/
  @javax.annotation.Nonnull
  @NotNull

  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public UploadFileData link(String link) {
    this.link = link;
    return this;
  }

   /**
   * Link to the file. This can also be any string. This can be used to filter when searching for the file&#39;s resulting chunks. The link value will not affect embedding creation.
   * @return link
  **/
  @javax.annotation.Nullable

  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public UploadFileData metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. Will be passed down to the file&#39;s chunks.
   * @return metadata
  **/
  @javax.annotation.Nullable

  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public UploadFileData tagSet(List<String> tagSet) {
    this.tagSet = tagSet;
    return this;
  }

  public UploadFileData addTagSetItem(String tagSetItem) {
    if (this.tagSet == null) {
      this.tagSet = new ArrayList<>();
    }
    this.tagSet.add(tagSetItem);
    return this;
  }

   /**
   * Tag set is a comma separated list of tags which will be passed down to the chunks made from the file. Tags are used to filter chunks when searching. HNSW indices are created for each tag such that there is no performance loss when filtering on them.
   * @return tagSet
  **/
  @javax.annotation.Nullable

  public List<String> getTagSet() {
    return tagSet;
  }

  public void setTagSet(List<String> tagSet) {
    this.tagSet = tagSet;
  }


  public UploadFileData timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Time stamp should be an ISO 8601 combined date and time without timezone. Time_stamp is used for time window filtering and recency-biasing search results. Will be passed down to the file&#39;s chunks.
   * @return timeStamp
  **/
  @javax.annotation.Nullable

  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadFileData uploadFileData = (UploadFileData) o;
    return Objects.equals(this.base64File, uploadFileData.base64File) &&
        Objects.equals(this.createChunks, uploadFileData.createChunks) &&
        Objects.equals(this.description, uploadFileData.description) &&
        Objects.equals(this.fileMimeType, uploadFileData.fileMimeType) &&
        Objects.equals(this.fileName, uploadFileData.fileName) &&
        Objects.equals(this.link, uploadFileData.link) &&
        Objects.equals(this.metadata, uploadFileData.metadata) &&
        Objects.equals(this.tagSet, uploadFileData.tagSet) &&
        Objects.equals(this.timeStamp, uploadFileData.timeStamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64File, createChunks, description, fileMimeType, fileName, link, metadata, tagSet, timeStamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadFileData {\n");
    sb.append("    base64File: ").append(toIndentedString(base64File)).append("\n");
    sb.append("    createChunks: ").append(toIndentedString(createChunks)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fileMimeType: ").append(toIndentedString(fileMimeType)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tagSet: ").append(toIndentedString(tagSet)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base64_file");
    openapiFields.add("create_chunks");
    openapiFields.add("description");
    openapiFields.add("file_mime_type");
    openapiFields.add("file_name");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("tag_set");
    openapiFields.add("time_stamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base64_file");
    openapiRequiredFields.add("file_mime_type");
    openapiRequiredFields.add("file_name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UploadFileData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadFileData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadFileData is not found in the empty JSON string", UploadFileData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadFileData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadFileData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadFileData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("base64_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base64_file").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("file_mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_mime_type").toString()));
      }
      if (!jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag_set") != null && !jsonObj.get("tag_set").isJsonNull() && !jsonObj.get("tag_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_set` to be an array in the JSON string but got `%s`", jsonObj.get("tag_set").toString()));
      }
      if ((jsonObj.get("time_stamp") != null && !jsonObj.get("time_stamp").isJsonNull()) && !jsonObj.get("time_stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_stamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadFileData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadFileData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadFileData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadFileData.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadFileData>() {
           @Override
           public void write(JsonWriter out, UploadFileData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadFileData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadFileData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadFileData
  * @throws IOException if the JSON string is invalid with respect to UploadFileData
  */
  public static UploadFileData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadFileData.class);
  }

 /**
  * Convert an instance of UploadFileData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

