/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ChatMessageProxy;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenerateChunksRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class GenerateChunksRequest {
  public static final String SERIALIZED_NAME_CHUNK_IDS = "chunk_ids";
  @SerializedName(SERIALIZED_NAME_CHUNK_IDS)
  private List<UUID> chunkIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_PREV_MESSAGES = "prev_messages";
  @SerializedName(SERIALIZED_NAME_PREV_MESSAGES)
  private List<@Valid ChatMessageProxy> prevMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  public static final String SERIALIZED_NAME_STREAM_RESPONSE = "stream_response";
  @SerializedName(SERIALIZED_NAME_STREAM_RESPONSE)
  private Boolean streamResponse;

  public GenerateChunksRequest() {
  }

  public GenerateChunksRequest chunkIds(List<UUID> chunkIds) {
    this.chunkIds = chunkIds;
    return this;
  }

  public GenerateChunksRequest addChunkIdsItem(UUID chunkIdsItem) {
    if (this.chunkIds == null) {
      this.chunkIds = new ArrayList<>();
    }
    this.chunkIds.add(chunkIdsItem);
    return this;
  }

   /**
   * The ids of the chunks to be retrieved and injected into the context window for RAG.
   * @return chunkIds
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid

  public List<UUID> getChunkIds() {
    return chunkIds;
  }

  public void setChunkIds(List<UUID> chunkIds) {
    this.chunkIds = chunkIds;
  }


  public GenerateChunksRequest model(String model) {
    this.model = model;
    return this;
  }

   /**
   * The model to use for the chat. This can be any model from the openrouter model list. If no model is provided, gpt-3.5-turbo will be used.
   * @return model
  **/
  @javax.annotation.Nullable

  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public GenerateChunksRequest prevMessages(List<@Valid ChatMessageProxy> prevMessages) {
    this.prevMessages = prevMessages;
    return this;
  }

  public GenerateChunksRequest addPrevMessagesItem(ChatMessageProxy prevMessagesItem) {
    if (this.prevMessages == null) {
      this.prevMessages = new ArrayList<>();
    }
    this.prevMessages.add(prevMessagesItem);
    return this;
  }

   /**
   * The previous messages to be placed into the chat history. The last message in this array will be the prompt for the model to inference on. The length of this array must be at least 1.
   * @return prevMessages
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid

  public List<@Valid ChatMessageProxy> getPrevMessages() {
    return prevMessages;
  }

  public void setPrevMessages(List<@Valid ChatMessageProxy> prevMessages) {
    this.prevMessages = prevMessages;
  }


  public GenerateChunksRequest prompt(String prompt) {
    this.prompt = prompt;
    return this;
  }

   /**
   * Prompt for the last message in the prev_messages array. This will be used to generate the next message in the chat. The default is &#39;Respond to the instruction and include the doc numbers that you used in square brackets at the end of the sentences that you used the docs for:&#39;. You can also specify an empty string to leave the final message alone such that your user&#39;s final message can be used as the prompt. See docs.trieve.ai or contact us for more information.
   * @return prompt
  **/
  @javax.annotation.Nullable

  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public GenerateChunksRequest streamResponse(Boolean streamResponse) {
    this.streamResponse = streamResponse;
    return this;
  }

   /**
   * Whether or not to stream the response. If this is set to true or not included, the response will be a stream. If this is set to false, the response will be a normal JSON response. Default is true.
   * @return streamResponse
  **/
  @javax.annotation.Nullable

  public Boolean getStreamResponse() {
    return streamResponse;
  }

  public void setStreamResponse(Boolean streamResponse) {
    this.streamResponse = streamResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateChunksRequest generateChunksRequest = (GenerateChunksRequest) o;
    return Objects.equals(this.chunkIds, generateChunksRequest.chunkIds) &&
        Objects.equals(this.model, generateChunksRequest.model) &&
        Objects.equals(this.prevMessages, generateChunksRequest.prevMessages) &&
        Objects.equals(this.prompt, generateChunksRequest.prompt) &&
        Objects.equals(this.streamResponse, generateChunksRequest.streamResponse);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chunkIds, model, prevMessages, prompt, streamResponse);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateChunksRequest {\n");
    sb.append("    chunkIds: ").append(toIndentedString(chunkIds)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    prevMessages: ").append(toIndentedString(prevMessages)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    streamResponse: ").append(toIndentedString(streamResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chunk_ids");
    openapiFields.add("model");
    openapiFields.add("prev_messages");
    openapiFields.add("prompt");
    openapiFields.add("stream_response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chunk_ids");
    openapiRequiredFields.add("prev_messages");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GenerateChunksRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateChunksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateChunksRequest is not found in the empty JSON string", GenerateChunksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateChunksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateChunksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateChunksRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("chunk_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("chunk_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chunk_ids` to be an array in the JSON string but got `%s`", jsonObj.get("chunk_ids").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("prev_messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev_messages` to be an array in the JSON string but got `%s`", jsonObj.get("prev_messages").toString()));
      }

      JsonArray jsonArrayprevMessages = jsonObj.getAsJsonArray("prev_messages");
      // validate the required field `prev_messages` (array)
      for (int i = 0; i < jsonArrayprevMessages.size(); i++) {
        ChatMessageProxy.validateJsonElement(jsonArrayprevMessages.get(i));
      };
      if ((jsonObj.get("prompt") != null && !jsonObj.get("prompt").isJsonNull()) && !jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateChunksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateChunksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateChunksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateChunksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateChunksRequest>() {
           @Override
           public void write(JsonWriter out, GenerateChunksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateChunksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateChunksRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateChunksRequest
  * @throws IOException if the JSON string is invalid with respect to GenerateChunksRequest
  */
  public static GenerateChunksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateChunksRequest.class);
  }

 /**
  * Convert an instance of GenerateChunksRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

