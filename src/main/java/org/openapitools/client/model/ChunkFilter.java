/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FieldCondition;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChunkFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class ChunkFilter {
  public static final String SERIALIZED_NAME_MUST = "must";
  @SerializedName(SERIALIZED_NAME_MUST)
  private List<@Valid FieldCondition> must;

  public static final String SERIALIZED_NAME_MUST_NOT = "must_not";
  @SerializedName(SERIALIZED_NAME_MUST_NOT)
  private List<@Valid FieldCondition> mustNot;

  public static final String SERIALIZED_NAME_SHOULD = "should";
  @SerializedName(SERIALIZED_NAME_SHOULD)
  private List<@Valid FieldCondition> should;

  public ChunkFilter() {
  }

  public ChunkFilter must(List<@Valid FieldCondition> must) {
    this.must = must;
    return this;
  }

  public ChunkFilter addMustItem(FieldCondition mustItem) {
    if (this.must == null) {
      this.must = new ArrayList<>();
    }
    this.must.add(mustItem);
    return this;
  }

   /**
   * All of these field conditions have to match for the chunk to be included in the result set.
   * @return must
  **/
  @javax.annotation.Nullable
  @Valid

  public List<@Valid FieldCondition> getMust() {
    return must;
  }

  public void setMust(List<@Valid FieldCondition> must) {
    this.must = must;
  }


  public ChunkFilter mustNot(List<@Valid FieldCondition> mustNot) {
    this.mustNot = mustNot;
    return this;
  }

  public ChunkFilter addMustNotItem(FieldCondition mustNotItem) {
    if (this.mustNot == null) {
      this.mustNot = new ArrayList<>();
    }
    this.mustNot.add(mustNotItem);
    return this;
  }

   /**
   * None of these field conditions can match for the chunk to be included in the result set.
   * @return mustNot
  **/
  @javax.annotation.Nullable
  @Valid

  public List<@Valid FieldCondition> getMustNot() {
    return mustNot;
  }

  public void setMustNot(List<@Valid FieldCondition> mustNot) {
    this.mustNot = mustNot;
  }


  public ChunkFilter should(List<@Valid FieldCondition> should) {
    this.should = should;
    return this;
  }

  public ChunkFilter addShouldItem(FieldCondition shouldItem) {
    if (this.should == null) {
      this.should = new ArrayList<>();
    }
    this.should.add(shouldItem);
    return this;
  }

   /**
   * Only one of these field conditions has to match for the chunk to be included in the result set.
   * @return should
  **/
  @javax.annotation.Nullable
  @Valid

  public List<@Valid FieldCondition> getShould() {
    return should;
  }

  public void setShould(List<@Valid FieldCondition> should) {
    this.should = should;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChunkFilter chunkFilter = (ChunkFilter) o;
    return Objects.equals(this.must, chunkFilter.must) &&
        Objects.equals(this.mustNot, chunkFilter.mustNot) &&
        Objects.equals(this.should, chunkFilter.should);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(must, mustNot, should);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChunkFilter {\n");
    sb.append("    must: ").append(toIndentedString(must)).append("\n");
    sb.append("    mustNot: ").append(toIndentedString(mustNot)).append("\n");
    sb.append("    should: ").append(toIndentedString(should)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("must");
    openapiFields.add("must_not");
    openapiFields.add("should");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChunkFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChunkFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChunkFilter is not found in the empty JSON string", ChunkFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChunkFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChunkFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("must") != null && !jsonObj.get("must").isJsonNull()) {
        JsonArray jsonArraymust = jsonObj.getAsJsonArray("must");
        if (jsonArraymust != null) {
          // ensure the json data is an array
          if (!jsonObj.get("must").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `must` to be an array in the JSON string but got `%s`", jsonObj.get("must").toString()));
          }

          // validate the optional field `must` (array)
          for (int i = 0; i < jsonArraymust.size(); i++) {
            FieldCondition.validateJsonElement(jsonArraymust.get(i));
          };
        }
      }
      if (jsonObj.get("must_not") != null && !jsonObj.get("must_not").isJsonNull()) {
        JsonArray jsonArraymustNot = jsonObj.getAsJsonArray("must_not");
        if (jsonArraymustNot != null) {
          // ensure the json data is an array
          if (!jsonObj.get("must_not").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `must_not` to be an array in the JSON string but got `%s`", jsonObj.get("must_not").toString()));
          }

          // validate the optional field `must_not` (array)
          for (int i = 0; i < jsonArraymustNot.size(); i++) {
            FieldCondition.validateJsonElement(jsonArraymustNot.get(i));
          };
        }
      }
      if (jsonObj.get("should") != null && !jsonObj.get("should").isJsonNull()) {
        JsonArray jsonArrayshould = jsonObj.getAsJsonArray("should");
        if (jsonArrayshould != null) {
          // ensure the json data is an array
          if (!jsonObj.get("should").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `should` to be an array in the JSON string but got `%s`", jsonObj.get("should").toString()));
          }

          // validate the optional field `should` (array)
          for (int i = 0; i < jsonArrayshould.size(); i++) {
            FieldCondition.validateJsonElement(jsonArrayshould.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChunkFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChunkFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChunkFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChunkFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ChunkFilter>() {
           @Override
           public void write(JsonWriter out, ChunkFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChunkFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChunkFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChunkFilter
  * @throws IOException if the JSON string is invalid with respect to ChunkFilter
  */
  public static ChunkFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChunkFilter.class);
  }

 /**
  * Convert an instance of ChunkFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

