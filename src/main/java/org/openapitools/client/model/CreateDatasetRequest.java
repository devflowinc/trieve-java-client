/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDatasetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-29T12:34:27.506198300-05:00[America/Chicago]", comments = "Generator version: 7.4.0")
public class CreateDatasetRequest {
  public static final String SERIALIZED_NAME_CLIENT_CONFIGURATION = "client_configuration";
  @SerializedName(SERIALIZED_NAME_CLIENT_CONFIGURATION)
  private Object clientConfiguration = null;

  public static final String SERIALIZED_NAME_DATASET_NAME = "dataset_name";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  private String datasetName;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private UUID organizationId;

  public static final String SERIALIZED_NAME_SERVER_CONFIGURATION = "server_configuration";
  @SerializedName(SERIALIZED_NAME_SERVER_CONFIGURATION)
  private Object serverConfiguration = null;

  public CreateDatasetRequest() {
  }

  public CreateDatasetRequest clientConfiguration(Object clientConfiguration) {
    this.clientConfiguration = clientConfiguration;
    return this;
  }

   /**
   * Client configuration for the dataset, can be arbitrary JSON. We recommend setting to &#x60;{}&#x60; to start. See docs.trieve.ai for more information or adjust with the admin dashboard.
   * @return clientConfiguration
  **/
  @javax.annotation.Nullable
  @NotNull

  public Object getClientConfiguration() {
    return clientConfiguration;
  }

  public void setClientConfiguration(Object clientConfiguration) {
    this.clientConfiguration = clientConfiguration;
  }


  public CreateDatasetRequest datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

   /**
   * Name of the dataset. Must be unique within the organization.
   * @return datasetName
  **/
  @javax.annotation.Nonnull
  @NotNull

  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }


  public CreateDatasetRequest organizationId(UUID organizationId) {
    this.organizationId = organizationId;
    return this;
  }

   /**
   * Organization ID that the dataset will belong to.
   * @return organizationId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid

  public UUID getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(UUID organizationId) {
    this.organizationId = organizationId;
  }


  public CreateDatasetRequest serverConfiguration(Object serverConfiguration) {
    this.serverConfiguration = serverConfiguration;
    return this;
  }

   /**
   * Server configuration for the dataset, can be arbitrary JSON. We recommend setting to &#x60;{}&#x60; to start. See docs.trieve.ai for more information or adjust with the admin dashboard.
   * @return serverConfiguration
  **/
  @javax.annotation.Nullable
  @NotNull

  public Object getServerConfiguration() {
    return serverConfiguration;
  }

  public void setServerConfiguration(Object serverConfiguration) {
    this.serverConfiguration = serverConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDatasetRequest createDatasetRequest = (CreateDatasetRequest) o;
    return Objects.equals(this.clientConfiguration, createDatasetRequest.clientConfiguration) &&
        Objects.equals(this.datasetName, createDatasetRequest.datasetName) &&
        Objects.equals(this.organizationId, createDatasetRequest.organizationId) &&
        Objects.equals(this.serverConfiguration, createDatasetRequest.serverConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientConfiguration, datasetName, organizationId, serverConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDatasetRequest {\n");
    sb.append("    clientConfiguration: ").append(toIndentedString(clientConfiguration)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    serverConfiguration: ").append(toIndentedString(serverConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_configuration");
    openapiFields.add("dataset_name");
    openapiFields.add("organization_id");
    openapiFields.add("server_configuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("client_configuration");
    openapiRequiredFields.add("dataset_name");
    openapiRequiredFields.add("organization_id");
    openapiRequiredFields.add("server_configuration");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateDatasetRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDatasetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDatasetRequest is not found in the empty JSON string", CreateDatasetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDatasetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDatasetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDatasetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataset_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset_name").toString()));
      }
      if (!jsonObj.get("organization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDatasetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDatasetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDatasetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDatasetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDatasetRequest>() {
           @Override
           public void write(JsonWriter out, CreateDatasetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDatasetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateDatasetRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateDatasetRequest
  * @throws IOException if the JSON string is invalid with respect to CreateDatasetRequest
  */
  public static CreateDatasetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDatasetRequest.class);
  }

 /**
  * Convert an instance of CreateDatasetRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

