/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import org.openapitools.client.model.CreateTopicData;
import org.openapitools.client.model.DeleteTopicData;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.Topic;
import java.util.UUID;
import org.openapitools.client.model.UpdateTopicData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTopic
     * @param trDataset The dataset id to use for the request (required)
     * @param createTopicData JSON request payload to create chat topic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The JSON response payload containing the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Topic name empty or a service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicCall(String trDataset, CreateTopicData createTopicData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTopicData;

        // create path and map variables
        String localVarPath = "/api/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicValidateBeforeCall(String trDataset, CreateTopicData createTopicData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling createTopic(Async)");
        }

        // verify the required parameter 'createTopicData' is set
        if (createTopicData == null) {
            throw new ApiException("Missing the required parameter 'createTopicData' when calling createTopic(Async)");
        }

        return createTopicCall(trDataset, createTopicData, _callback);

    }

    /**
     * Create Topic
     * Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
     * @param trDataset The dataset id to use for the request (required)
     * @param createTopicData JSON request payload to create chat topic (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The JSON response payload containing the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Topic name empty or a service error </td><td>  -  </td></tr>
     </table>
     */
    public Topic createTopic(String trDataset, CreateTopicData createTopicData) throws ApiException {
        ApiResponse<Topic> localVarResp = createTopicWithHttpInfo(trDataset, createTopicData);
        return localVarResp.getData();
    }

    /**
     * Create Topic
     * Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
     * @param trDataset The dataset id to use for the request (required)
     * @param createTopicData JSON request payload to create chat topic (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The JSON response payload containing the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Topic name empty or a service error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> createTopicWithHttpInfo( @NotNull String trDataset,  @NotNull CreateTopicData createTopicData) throws ApiException {
        okhttp3.Call localVarCall = createTopicValidateBeforeCall(trDataset, createTopicData, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Topic (asynchronously)
     * Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
     * @param trDataset The dataset id to use for the request (required)
     * @param createTopicData JSON request payload to create chat topic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The JSON response payload containing the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Topic name empty or a service error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicAsync(String trDataset, CreateTopicData createTopicData, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicValidateBeforeCall(trDataset, createTopicData, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTopic
     * @param trDataset The dataset id to use for the request (required)
     * @param deleteTopicData JSON request payload to delete a chat topic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTopicCall(String trDataset, DeleteTopicData deleteTopicData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTopicData;

        // create path and map variables
        String localVarPath = "/api/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTopicValidateBeforeCall(String trDataset, DeleteTopicData deleteTopicData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling deleteTopic(Async)");
        }

        // verify the required parameter 'deleteTopicData' is set
        if (deleteTopicData == null) {
            throw new ApiException("Missing the required parameter 'deleteTopicData' when calling deleteTopic(Async)");
        }

        return deleteTopicCall(trDataset, deleteTopicData, _callback);

    }

    /**
     * Delete Topic
     * Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
     * @param trDataset The dataset id to use for the request (required)
     * @param deleteTopicData JSON request payload to delete a chat topic (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic deletion </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTopic(String trDataset, DeleteTopicData deleteTopicData) throws ApiException {
        deleteTopicWithHttpInfo(trDataset, deleteTopicData);
    }

    /**
     * Delete Topic
     * Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
     * @param trDataset The dataset id to use for the request (required)
     * @param deleteTopicData JSON request payload to delete a chat topic (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic deletion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTopicWithHttpInfo( @NotNull String trDataset,  @NotNull DeleteTopicData deleteTopicData) throws ApiException {
        okhttp3.Call localVarCall = deleteTopicValidateBeforeCall(trDataset, deleteTopicData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Topic (asynchronously)
     * Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
     * @param trDataset The dataset id to use for the request (required)
     * @param deleteTopicData JSON request payload to delete a chat topic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTopicAsync(String trDataset, DeleteTopicData deleteTopicData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTopicValidateBeforeCall(trDataset, deleteTopicData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllTopicsForUser
     * @param userId The id of the user to get topics for (required)
     * @param trDataset The dataset id to use for the request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All topics belonging to a given user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic get </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTopicsForUserCall(UUID userId, String trDataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/topic/user/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTopicsForUserValidateBeforeCall(UUID userId, String trDataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllTopicsForUser(Async)");
        }

        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling getAllTopicsForUser(Async)");
        }

        return getAllTopicsForUserCall(userId, trDataset, _callback);

    }

    /**
     * Get All Topics for User
     * Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
     * @param userId The id of the user to get topics for (required)
     * @param trDataset The dataset id to use for the request (required)
     * @return List&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All topics belonging to a given user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic get </td><td>  -  </td></tr>
     </table>
     */
    public List<Topic> getAllTopicsForUser(UUID userId, String trDataset) throws ApiException {
        ApiResponse<List<Topic>> localVarResp = getAllTopicsForUserWithHttpInfo(userId, trDataset);
        return localVarResp.getData();
    }

    /**
     * Get All Topics for User
     * Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
     * @param userId The id of the user to get topics for (required)
     * @param trDataset The dataset id to use for the request (required)
     * @return ApiResponse&lt;List&lt;Topic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All topics belonging to a given user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic get </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Topic>> getAllTopicsForUserWithHttpInfo( @NotNull UUID userId,  @NotNull String trDataset) throws ApiException {
        okhttp3.Call localVarCall = getAllTopicsForUserValidateBeforeCall(userId, trDataset, null);
        Type localVarReturnType = new TypeToken<List<Topic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Topics for User (asynchronously)
     * Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
     * @param userId The id of the user to get topics for (required)
     * @param trDataset The dataset id to use for the request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All topics belonging to a given user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic get </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTopicsForUserAsync(UUID userId, String trDataset, final ApiCallback<List<Topic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTopicsForUserValidateBeforeCall(userId, trDataset, _callback);
        Type localVarReturnType = new TypeToken<List<Topic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTopic
     * @param trDataset The dataset id to use for the request (required)
     * @param updateTopicData JSON request payload to update a chat topic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicCall(String trDataset, UpdateTopicData updateTopicData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTopicData;

        // create path and map variables
        String localVarPath = "/api/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicValidateBeforeCall(String trDataset, UpdateTopicData updateTopicData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling updateTopic(Async)");
        }

        // verify the required parameter 'updateTopicData' is set
        if (updateTopicData == null) {
            throw new ApiException("Missing the required parameter 'updateTopicData' when calling updateTopic(Async)");
        }

        return updateTopicCall(trDataset, updateTopicData, _callback);

    }

    /**
     * Update Topic
     * Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
     * @param trDataset The dataset id to use for the request (required)
     * @param updateTopicData JSON request payload to update a chat topic (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic update </td><td>  -  </td></tr>
     </table>
     */
    public void updateTopic(String trDataset, UpdateTopicData updateTopicData) throws ApiException {
        updateTopicWithHttpInfo(trDataset, updateTopicData);
    }

    /**
     * Update Topic
     * Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
     * @param trDataset The dataset id to use for the request (required)
     * @param updateTopicData JSON request payload to update a chat topic (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic update </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTopicWithHttpInfo( @NotNull String trDataset,  @NotNull UpdateTopicData updateTopicData) throws ApiException {
        okhttp3.Call localVarCall = updateTopicValidateBeforeCall(trDataset, updateTopicData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Topic (asynchronously)
     * Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
     * @param trDataset The dataset id to use for the request (required)
     * @param updateTopicData JSON request payload to update a chat topic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the topic was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to topic update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicAsync(String trDataset, UpdateTopicData updateTopicData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicValidateBeforeCall(trDataset, updateTopicData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
