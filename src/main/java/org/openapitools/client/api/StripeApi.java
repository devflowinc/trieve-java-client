/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.StripePlan;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StripeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StripeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StripeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelSubscription
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to cancel (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was cancelled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelSubscriptionCall(String trOrganization, UUID subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stripe/subscription/{subscription_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSubscriptionValidateBeforeCall(String trOrganization, UUID subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling cancelSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cancelSubscription(Async)");
        }

        return cancelSubscriptionCall(trOrganization, subscriptionId, _callback);

    }

    /**
     * Cancel Subscription
     * Cancel Subscription  Cancel a subscription by its id
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to cancel (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was cancelled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public void cancelSubscription(String trOrganization, UUID subscriptionId) throws ApiException {
        cancelSubscriptionWithHttpInfo(trOrganization, subscriptionId);
    }

    /**
     * Cancel Subscription
     * Cancel Subscription  Cancel a subscription by its id
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to cancel (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was cancelled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelSubscriptionWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = cancelSubscriptionValidateBeforeCall(trOrganization, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Subscription (asynchronously)
     * Cancel Subscription  Cancel a subscription by its id
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to cancel (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was cancelled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelSubscriptionAsync(String trOrganization, UUID subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSubscriptionValidateBeforeCall(trOrganization, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directToPaymentLink
     * @param planId id of the plan you want to subscribe to (required)
     * @param organizationId id of the organization you want to subscribe to the plan (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> SeeOther response redirecting user to stripe checkout page </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directToPaymentLinkCall(UUID planId, UUID organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stripe/payment_link/{plan_id}/{organization_id}"
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directToPaymentLinkValidateBeforeCall(UUID planId, UUID organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling directToPaymentLink(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling directToPaymentLink(Async)");
        }

        return directToPaymentLinkCall(planId, organizationId, _callback);

    }

    /**
     * Checkout
     * Checkout  Get a direct link to the stripe checkout page for the plan and organization
     * @param planId id of the plan you want to subscribe to (required)
     * @param organizationId id of the organization you want to subscribe to the plan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> SeeOther response redirecting user to stripe checkout page </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public void directToPaymentLink(UUID planId, UUID organizationId) throws ApiException {
        directToPaymentLinkWithHttpInfo(planId, organizationId);
    }

    /**
     * Checkout
     * Checkout  Get a direct link to the stripe checkout page for the plan and organization
     * @param planId id of the plan you want to subscribe to (required)
     * @param organizationId id of the organization you want to subscribe to the plan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> SeeOther response redirecting user to stripe checkout page </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> directToPaymentLinkWithHttpInfo( @NotNull UUID planId,  @NotNull UUID organizationId) throws ApiException {
        okhttp3.Call localVarCall = directToPaymentLinkValidateBeforeCall(planId, organizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Checkout (asynchronously)
     * Checkout  Get a direct link to the stripe checkout page for the plan and organization
     * @param planId id of the plan you want to subscribe to (required)
     * @param organizationId id of the organization you want to subscribe to the plan (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> SeeOther response redirecting user to stripe checkout page </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating a URL for a stripe checkout page </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directToPaymentLinkAsync(UUID planId, UUID organizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directToPaymentLinkValidateBeforeCall(planId, organizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPlans
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all plans </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting all plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPlansCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stripe/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPlansValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllPlansCall(_callback);

    }

    /**
     * Get All Plans
     * Get All Plans  Get a list of all plans
     * @return List&lt;StripePlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all plans </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting all plans </td><td>  -  </td></tr>
     </table>
     */
    public List<StripePlan> getAllPlans() throws ApiException {
        ApiResponse<List<StripePlan>> localVarResp = getAllPlansWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get All Plans
     * Get All Plans  Get a list of all plans
     * @return ApiResponse&lt;List&lt;StripePlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all plans </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting all plans </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StripePlan>> getAllPlansWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllPlansValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<StripePlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Plans (asynchronously)
     * Get All Plans  Get a list of all plans
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all plans </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting all plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPlansAsync(final ApiCallback<List<StripePlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPlansValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<StripePlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionPlan
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to update (required)
     * @param planId id of the plan you want to subscribe to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was updated to the new plan </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the subscription to the new plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionPlanCall(String trOrganization, UUID subscriptionId, UUID planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stripe/subscription_plan/{subscription_id}/{plan_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "plan_id" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionPlanValidateBeforeCall(String trOrganization, UUID subscriptionId, UUID planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling updateSubscriptionPlan(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscriptionPlan(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling updateSubscriptionPlan(Async)");
        }

        return updateSubscriptionPlanCall(trOrganization, subscriptionId, planId, _callback);

    }

    /**
     * Update Subscription Plan
     * Update Subscription Plan  Update a subscription to a new plan
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to update (required)
     * @param planId id of the plan you want to subscribe to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was updated to the new plan </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the subscription to the new plan </td><td>  -  </td></tr>
     </table>
     */
    public void updateSubscriptionPlan(String trOrganization, UUID subscriptionId, UUID planId) throws ApiException {
        updateSubscriptionPlanWithHttpInfo(trOrganization, subscriptionId, planId);
    }

    /**
     * Update Subscription Plan
     * Update Subscription Plan  Update a subscription to a new plan
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to update (required)
     * @param planId id of the plan you want to subscribe to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was updated to the new plan </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the subscription to the new plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSubscriptionPlanWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID subscriptionId,  @NotNull UUID planId) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionPlanValidateBeforeCall(trOrganization, subscriptionId, planId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Subscription Plan (asynchronously)
     * Update Subscription Plan  Update a subscription to a new plan
     * @param trOrganization The organization id to use for the request (required)
     * @param subscriptionId id of the subscription you want to update (required)
     * @param planId id of the plan you want to subscribe to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the subscription was updated to the new plan </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the subscription to the new plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionPlanAsync(String trOrganization, UUID subscriptionId, UUID planId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionPlanValidateBeforeCall(trOrganization, subscriptionId, planId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
