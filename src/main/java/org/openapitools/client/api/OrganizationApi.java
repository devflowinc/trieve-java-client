/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import org.openapitools.client.model.CreateOrganizationData;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.OrganizationUsageCount;
import org.openapitools.client.model.SlimUser;
import java.util.UUID;
import org.openapitools.client.model.UpdateOrganizationData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrganization
     * @param createOrganizationData The organization data that you want to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationCall(CreateOrganizationData createOrganizationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationData;

        // create path and map variables
        String localVarPath = "/api/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationValidateBeforeCall(CreateOrganizationData createOrganizationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOrganizationData' is set
        if (createOrganizationData == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationData' when calling createOrganization(Async)");
        }

        return createOrganizationCall(createOrganizationData, _callback);

    }

    /**
     * Create Organization
     * Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
     * @param createOrganizationData The organization data that you want to create (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the organization </td><td>  -  </td></tr>
     </table>
     */
    public Organization createOrganization(CreateOrganizationData createOrganizationData) throws ApiException {
        ApiResponse<Organization> localVarResp = createOrganizationWithHttpInfo(createOrganizationData);
        return localVarResp.getData();
    }

    /**
     * Create Organization
     * Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
     * @param createOrganizationData The organization data that you want to create (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the organization </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> createOrganizationWithHttpInfo( @NotNull CreateOrganizationData createOrganizationData) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationValidateBeforeCall(createOrganizationData, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Organization (asynchronously)
     * Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
     * @param createOrganizationData The organization data that you want to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAsync(CreateOrganizationData createOrganizationData, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationValidateBeforeCall(createOrganizationData, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationById
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the organization was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationByIdCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organization/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationByIdValidateBeforeCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling deleteOrganizationById(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationById(Async)");
        }

        return deleteOrganizationByIdCall(trOrganization, organizationId, _callback);

    }

    /**
     * Delete Organization
     * Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the organization was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public Organization deleteOrganizationById(String trOrganization, UUID organizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = deleteOrganizationByIdWithHttpInfo(trOrganization, organizationId);
        return localVarResp.getData();
    }

    /**
     * Delete Organization
     * Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the organization was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> deleteOrganizationByIdWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID organizationId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationByIdValidateBeforeCall(trOrganization, organizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Organization (asynchronously)
     * Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the organization was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationByIdAsync(String trOrganization, UUID organizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationByIdValidateBeforeCall(trOrganization, organizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationById
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization with the id that was requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationByIdCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organization/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationByIdValidateBeforeCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling getOrganizationById(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationById(Async)");
        }

        return getOrganizationByIdCall(trOrganization, organizationId, _callback);

    }

    /**
     * Get Organization
     * Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization with the id that was requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public Organization getOrganizationById(String trOrganization, UUID organizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = getOrganizationByIdWithHttpInfo(trOrganization, organizationId);
        return localVarResp.getData();
    }

    /**
     * Get Organization
     * Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization with the id that was requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> getOrganizationByIdWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationByIdValidateBeforeCall(trOrganization, organizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization (asynchronously)
     * Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization with the id that was requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationByIdAsync(String trOrganization, UUID organizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationByIdValidateBeforeCall(trOrganization, organizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationUsage
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the usage of. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current usage of the specified organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s usage by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationUsageCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organization/usage/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationUsageValidateBeforeCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling getOrganizationUsage(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationUsage(Async)");
        }

        return getOrganizationUsageCall(trOrganization, organizationId, _callback);

    }

    /**
     * Get Organization Usage
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the usage of. (required)
     * @return OrganizationUsageCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current usage of the specified organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s usage by id </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationUsageCount getOrganizationUsage(String trOrganization, UUID organizationId) throws ApiException {
        ApiResponse<OrganizationUsageCount> localVarResp = getOrganizationUsageWithHttpInfo(trOrganization, organizationId);
        return localVarResp.getData();
    }

    /**
     * Get Organization Usage
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the usage of. (required)
     * @return ApiResponse&lt;OrganizationUsageCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current usage of the specified organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s usage by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationUsageCount> getOrganizationUsageWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationUsageValidateBeforeCall(trOrganization, organizationId, null);
        Type localVarReturnType = new TypeToken<OrganizationUsageCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization Usage (asynchronously)
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the usage of. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current usage of the specified organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s usage by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationUsageAsync(String trOrganization, UUID organizationId, final ApiCallback<OrganizationUsageCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationUsageValidateBeforeCall(trOrganization, organizationId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationUsageCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationUsers
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the users of. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users who belong to the specified by organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s users by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationUsersCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organization/users/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationUsersValidateBeforeCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling getOrganizationUsers(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationUsers(Async)");
        }

        return getOrganizationUsersCall(trOrganization, organizationId, _callback);

    }

    /**
     * Get Organization Users
     * Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the users of. (required)
     * @return List&lt;SlimUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users who belong to the specified by organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s users by id </td><td>  -  </td></tr>
     </table>
     */
    public List<SlimUser> getOrganizationUsers(String trOrganization, UUID organizationId) throws ApiException {
        ApiResponse<List<SlimUser>> localVarResp = getOrganizationUsersWithHttpInfo(trOrganization, organizationId);
        return localVarResp.getData();
    }

    /**
     * Get Organization Users
     * Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the users of. (required)
     * @return ApiResponse&lt;List&lt;SlimUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users who belong to the specified by organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s users by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SlimUser>> getOrganizationUsersWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationUsersValidateBeforeCall(trOrganization, organizationId, null);
        Type localVarReturnType = new TypeToken<List<SlimUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization Users (asynchronously)
     * Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId The id of the organization you want to fetch the users of. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users who belong to the specified by organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the organization&#39;s users by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationUsersAsync(String trOrganization, UUID organizationId, final ApiCallback<List<SlimUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationUsersValidateBeforeCall(trOrganization, organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<SlimUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganization
     * @param trOrganization The organization id to use for the request (required)
     * @param updateOrganizationData The organization data that you want to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationCall(String trOrganization, UpdateOrganizationData updateOrganizationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationData;

        // create path and map variables
        String localVarPath = "/api/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationValidateBeforeCall(String trOrganization, UpdateOrganizationData updateOrganizationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling updateOrganization(Async)");
        }

        // verify the required parameter 'updateOrganizationData' is set
        if (updateOrganizationData == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationData' when calling updateOrganization(Async)");
        }

        return updateOrganizationCall(trOrganization, updateOrganizationData, _callback);

    }

    /**
     * Update Organization
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * @param trOrganization The organization id to use for the request (required)
     * @param updateOrganizationData The organization data that you want to update (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the organization </td><td>  -  </td></tr>
     </table>
     */
    public Organization updateOrganization(String trOrganization, UpdateOrganizationData updateOrganizationData) throws ApiException {
        ApiResponse<Organization> localVarResp = updateOrganizationWithHttpInfo(trOrganization, updateOrganizationData);
        return localVarResp.getData();
    }

    /**
     * Update Organization
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * @param trOrganization The organization id to use for the request (required)
     * @param updateOrganizationData The organization data that you want to update (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the organization </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> updateOrganizationWithHttpInfo( @NotNull String trOrganization,  @NotNull UpdateOrganizationData updateOrganizationData) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationValidateBeforeCall(trOrganization, updateOrganizationData, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Organization (asynchronously)
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * @param trOrganization The organization id to use for the request (required)
     * @param updateOrganizationData The organization data that you want to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated organization object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAsync(String trOrganization, UpdateOrganizationData updateOrganizationData, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationValidateBeforeCall(trOrganization, updateOrganizationData, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
