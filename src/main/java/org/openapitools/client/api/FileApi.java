/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.FileDTO;
import org.openapitools.client.model.ModelFile;
import java.util.UUID;
import org.openapitools.client.model.UploadFileData;
import org.openapitools.client.model.UploadFileResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFileHandler
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to delete (required)
     * @param deleteChunks Whether or not to delete the chunks associated with the file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the file has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding or deleting the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileHandlerCall(String trDataset, UUID fileId, Boolean deleteChunks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/file/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteChunks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delete_chunks", deleteChunks));
        }

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileHandlerValidateBeforeCall(String trDataset, UUID fileId, Boolean deleteChunks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling deleteFileHandler(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileHandler(Async)");
        }

        // verify the required parameter 'deleteChunks' is set
        if (deleteChunks == null) {
            throw new ApiException("Missing the required parameter 'deleteChunks' when calling deleteFileHandler(Async)");
        }

        return deleteFileHandlerCall(trDataset, fileId, deleteChunks, _callback);

    }

    /**
     * Delete File
     * Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to delete (required)
     * @param deleteChunks Whether or not to delete the chunks associated with the file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the file has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding or deleting the file </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFileHandler(String trDataset, UUID fileId, Boolean deleteChunks) throws ApiException {
        deleteFileHandlerWithHttpInfo(trDataset, fileId, deleteChunks);
    }

    /**
     * Delete File
     * Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to delete (required)
     * @param deleteChunks Whether or not to delete the chunks associated with the file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the file has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding or deleting the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFileHandlerWithHttpInfo( @NotNull String trDataset,  @NotNull UUID fileId,  @NotNull Boolean deleteChunks) throws ApiException {
        okhttp3.Call localVarCall = deleteFileHandlerValidateBeforeCall(trDataset, fileId, deleteChunks, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete File (asynchronously)
     * Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to delete (required)
     * @param deleteChunks Whether or not to delete the chunks associated with the file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Confirmation that the file has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding or deleting the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileHandlerAsync(String trDataset, UUID fileId, Boolean deleteChunks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileHandlerValidateBeforeCall(trDataset, fileId, deleteChunks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetFilesHandler
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset to fetch files for. (required)
     * @param page The page number of files you wish to fetch. Each page contains at most 10 files. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the files in the current dataset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting the files in the current datase </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetFilesHandlerCall(String trDataset, UUID datasetId, Long page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/files/{dataset_id}/{page}"
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetFilesHandlerValidateBeforeCall(String trDataset, UUID datasetId, Long page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling getDatasetFilesHandler(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDatasetFilesHandler(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getDatasetFilesHandler(Async)");
        }

        return getDatasetFilesHandlerCall(trDataset, datasetId, page, _callback);

    }

    /**
     * Get Files for Dataset
     * Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset to fetch files for. (required)
     * @param page The page number of files you wish to fetch. Each page contains at most 10 files. (required)
     * @return List&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the files in the current dataset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting the files in the current datase </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelFile> getDatasetFilesHandler(String trDataset, UUID datasetId, Long page) throws ApiException {
        ApiResponse<List<ModelFile>> localVarResp = getDatasetFilesHandlerWithHttpInfo(trDataset, datasetId, page);
        return localVarResp.getData();
    }

    /**
     * Get Files for Dataset
     * Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset to fetch files for. (required)
     * @param page The page number of files you wish to fetch. Each page contains at most 10 files. (required)
     * @return ApiResponse&lt;List&lt;ModelFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the files in the current dataset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting the files in the current datase </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelFile>> getDatasetFilesHandlerWithHttpInfo( @NotNull String trDataset,  @NotNull UUID datasetId,  @NotNull  @Min(0L)Long page) throws ApiException {
        okhttp3.Call localVarCall = getDatasetFilesHandlerValidateBeforeCall(trDataset, datasetId, page, null);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Files for Dataset (asynchronously)
     * Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset to fetch files for. (required)
     * @param page The page number of files you wish to fetch. Each page contains at most 10 files. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the files in the current dataset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to getting the files in the current datase </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetFilesHandlerAsync(String trDataset, UUID datasetId, Long page, final ApiCallback<List<ModelFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetFilesHandlerValidateBeforeCall(trDataset, datasetId, page, _callback);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileHandler
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The signed s3 url corresponding to the file_id requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileHandlerCall(String trDataset, UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/file/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileHandlerValidateBeforeCall(String trDataset, UUID fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling getFileHandler(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileHandler(Async)");
        }

        return getFileHandlerCall(trDataset, fileId, _callback);

    }

    /**
     * Get File
     * Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to fetch (required)
     * @return FileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The signed s3 url corresponding to the file_id requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the file </td><td>  -  </td></tr>
     </table>
     */
    public FileDTO getFileHandler(String trDataset, UUID fileId) throws ApiException {
        ApiResponse<FileDTO> localVarResp = getFileHandlerWithHttpInfo(trDataset, fileId);
        return localVarResp.getData();
    }

    /**
     * Get File
     * Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to fetch (required)
     * @return ApiResponse&lt;FileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The signed s3 url corresponding to the file_id requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileDTO> getFileHandlerWithHttpInfo( @NotNull String trDataset,  @NotNull UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileHandlerValidateBeforeCall(trDataset, fileId, null);
        Type localVarReturnType = new TypeToken<FileDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File (asynchronously)
     * Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
     * @param trDataset The dataset id to use for the request (required)
     * @param fileId The id of the file to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The signed s3 url corresponding to the file_id requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to finding the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileHandlerAsync(String trDataset, UUID fileId, final ApiCallback<FileDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileHandlerValidateBeforeCall(trDataset, fileId, _callback);
        Type localVarReturnType = new TypeToken<FileDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFileHandler
     * @param trDataset The dataset id to use for the request (required)
     * @param uploadFileData JSON request payload to upload a file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the file is uploading </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to uploading the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileHandlerCall(String trDataset, UploadFileData uploadFileData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadFileData;

        // create path and map variables
        String localVarPath = "/api/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileHandlerValidateBeforeCall(String trDataset, UploadFileData uploadFileData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling uploadFileHandler(Async)");
        }

        // verify the required parameter 'uploadFileData' is set
        if (uploadFileData == null) {
            throw new ApiException("Missing the required parameter 'uploadFileData' when calling uploadFileHandler(Async)");
        }

        return uploadFileHandlerCall(trDataset, uploadFileData, _callback);

    }

    /**
     * Upload File
     * Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
     * @param trDataset The dataset id to use for the request (required)
     * @param uploadFileData JSON request payload to upload a file (required)
     * @return UploadFileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the file is uploading </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to uploading the file </td><td>  -  </td></tr>
     </table>
     */
    public UploadFileResult uploadFileHandler(String trDataset, UploadFileData uploadFileData) throws ApiException {
        ApiResponse<UploadFileResult> localVarResp = uploadFileHandlerWithHttpInfo(trDataset, uploadFileData);
        return localVarResp.getData();
    }

    /**
     * Upload File
     * Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
     * @param trDataset The dataset id to use for the request (required)
     * @param uploadFileData JSON request payload to upload a file (required)
     * @return ApiResponse&lt;UploadFileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the file is uploading </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to uploading the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadFileResult> uploadFileHandlerWithHttpInfo( @NotNull String trDataset,  @NotNull UploadFileData uploadFileData) throws ApiException {
        okhttp3.Call localVarCall = uploadFileHandlerValidateBeforeCall(trDataset, uploadFileData, null);
        Type localVarReturnType = new TypeToken<UploadFileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload File (asynchronously)
     * Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
     * @param trDataset The dataset id to use for the request (required)
     * @param uploadFileData JSON request payload to upload a file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation that the file is uploading </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to uploading the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileHandlerAsync(String trDataset, UploadFileData uploadFileData, final ApiCallback<UploadFileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileHandlerValidateBeforeCall(trDataset, uploadFileData, _callback);
        Type localVarReturnType = new TypeToken<UploadFileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
