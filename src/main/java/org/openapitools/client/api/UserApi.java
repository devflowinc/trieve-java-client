/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import org.openapitools.client.model.ApiKeyDTO;
import org.openapitools.client.model.DeleteUserApiKeyRequest;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.SetUserApiKeyRequest;
import org.openapitools.client.model.SetUserApiKeyResponse;
import org.openapitools.client.model.SlimUser;
import org.openapitools.client.model.UpdateUserData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUserApiKey
     * @param deleteUserApiKeyRequest JSON request payload to delete a user api key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserApiKeyCall(DeleteUserApiKeyRequest deleteUserApiKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserApiKeyRequest;

        // create path and map variables
        String localVarPath = "/api/user/delete_api_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserApiKeyValidateBeforeCall(DeleteUserApiKeyRequest deleteUserApiKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteUserApiKeyRequest' is set
        if (deleteUserApiKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserApiKeyRequest' when calling deleteUserApiKey(Async)");
        }

        return deleteUserApiKeyCall(deleteUserApiKeyRequest, _callback);

    }

    /**
     * Delete User Api Key
     * Delete User Api Key  Delete an api key for the auth&#39;ed user.
     * @param deleteUserApiKeyRequest JSON request payload to delete a user api key (required)
     * @return List&lt;ApiKeyDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public List<ApiKeyDTO> deleteUserApiKey(DeleteUserApiKeyRequest deleteUserApiKeyRequest) throws ApiException {
        ApiResponse<List<ApiKeyDTO>> localVarResp = deleteUserApiKeyWithHttpInfo(deleteUserApiKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Delete User Api Key
     * Delete User Api Key  Delete an api key for the auth&#39;ed user.
     * @param deleteUserApiKeyRequest JSON request payload to delete a user api key (required)
     * @return ApiResponse&lt;List&lt;ApiKeyDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApiKeyDTO>> deleteUserApiKeyWithHttpInfo( @NotNull DeleteUserApiKeyRequest deleteUserApiKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteUserApiKeyValidateBeforeCall(deleteUserApiKeyRequest, null);
        Type localVarReturnType = new TypeToken<List<ApiKeyDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete User Api Key (asynchronously)
     * Delete User Api Key  Delete an api key for the auth&#39;ed user.
     * @param deleteUserApiKeyRequest JSON request payload to delete a user api key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserApiKeyAsync(DeleteUserApiKeyRequest deleteUserApiKeyRequest, final ApiCallback<List<ApiKeyDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserApiKeyValidateBeforeCall(deleteUserApiKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<List<ApiKeyDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserApiKey
     * @param setUserApiKeyRequest JSON request payload to create a new user api key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserApiKeyCall(SetUserApiKeyRequest setUserApiKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setUserApiKeyRequest;

        // create path and map variables
        String localVarPath = "/api/user/set_api_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserApiKeyValidateBeforeCall(SetUserApiKeyRequest setUserApiKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setUserApiKeyRequest' is set
        if (setUserApiKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'setUserApiKeyRequest' when calling setUserApiKey(Async)");
        }

        return setUserApiKeyCall(setUserApiKeyRequest, _callback);

    }

    /**
     * Set User Api Key
     * Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
     * @param setUserApiKeyRequest JSON request payload to create a new user api key (required)
     * @return SetUserApiKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public SetUserApiKeyResponse setUserApiKey(SetUserApiKeyRequest setUserApiKeyRequest) throws ApiException {
        ApiResponse<SetUserApiKeyResponse> localVarResp = setUserApiKeyWithHttpInfo(setUserApiKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Set User Api Key
     * Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
     * @param setUserApiKeyRequest JSON request payload to create a new user api key (required)
     * @return ApiResponse&lt;SetUserApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetUserApiKeyResponse> setUserApiKeyWithHttpInfo( @NotNull SetUserApiKeyRequest setUserApiKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = setUserApiKeyValidateBeforeCall(setUserApiKeyRequest, null);
        Type localVarReturnType = new TypeToken<SetUserApiKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set User Api Key (asynchronously)
     * Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
     * @param setUserApiKeyRequest JSON request payload to create a new user api key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the api_key for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating api_key for the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserApiKeyAsync(SetUserApiKeyRequest setUserApiKeyRequest, final ApiCallback<SetUserApiKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserApiKeyValidateBeforeCall(setUserApiKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<SetUserApiKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param updateUserData JSON request payload to update user information for the auth&#39;ed user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(UpdateUserData updateUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserData;

        // create path and map variables
        String localVarPath = "/api/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(UpdateUserData updateUserData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateUserData' is set
        if (updateUserData == null) {
            throw new ApiException("Missing the required parameter 'updateUserData' when calling updateUser(Async)");
        }

        return updateUserCall(updateUserData, _callback);

    }

    /**
     * Update User
     * Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
     * @param updateUserData JSON request payload to update user information for the auth&#39;ed user (required)
     * @return SlimUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the user </td><td>  -  </td></tr>
     </table>
     */
    public SlimUser updateUser(UpdateUserData updateUserData) throws ApiException {
        ApiResponse<SlimUser> localVarResp = updateUserWithHttpInfo(updateUserData);
        return localVarResp.getData();
    }

    /**
     * Update User
     * Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
     * @param updateUserData JSON request payload to update user information for the auth&#39;ed user (required)
     * @return ApiResponse&lt;SlimUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlimUser> updateUserWithHttpInfo( @NotNull UpdateUserData updateUserData) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(updateUserData, null);
        Type localVarReturnType = new TypeToken<SlimUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
     * @param updateUserData JSON request payload to update user information for the auth&#39;ed user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON body representing the updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(UpdateUserData updateUserData, final ApiCallback<SlimUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(updateUserData, _callback);
        Type localVarReturnType = new TypeToken<SlimUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
