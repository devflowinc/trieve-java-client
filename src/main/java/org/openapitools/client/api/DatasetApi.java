/*
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import org.openapitools.client.model.ClientDatasetConfiguration;
import org.openapitools.client.model.CreateDatasetRequest;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.DatasetAndUsage;
import org.openapitools.client.model.DeleteDatasetRequest;
import org.openapitools.client.model.ErrorResponseBody;
import java.util.UUID;
import org.openapitools.client.model.UpdateDatasetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDataset
     * @param trOrganization The organization id to use for the request (required)
     * @param createDatasetRequest JSON request payload to create a new dataset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetCall(String trOrganization, CreateDatasetRequest createDatasetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDatasetRequest;

        // create path and map variables
        String localVarPath = "/api/dataset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasetValidateBeforeCall(String trOrganization, CreateDatasetRequest createDatasetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling createDataset(Async)");
        }

        // verify the required parameter 'createDatasetRequest' is set
        if (createDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'createDatasetRequest' when calling createDataset(Async)");
        }

        return createDatasetCall(trOrganization, createDatasetRequest, _callback);

    }

    /**
     * Create dataset
     * Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param createDatasetRequest JSON request payload to create a new dataset (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public Dataset createDataset(String trOrganization, CreateDatasetRequest createDatasetRequest) throws ApiException {
        ApiResponse<Dataset> localVarResp = createDatasetWithHttpInfo(trOrganization, createDatasetRequest);
        return localVarResp.getData();
    }

    /**
     * Create dataset
     * Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param createDatasetRequest JSON request payload to create a new dataset (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> createDatasetWithHttpInfo( @NotNull String trOrganization,  @NotNull CreateDatasetRequest createDatasetRequest) throws ApiException {
        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(trOrganization, createDatasetRequest, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create dataset (asynchronously)
     * Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param createDatasetRequest JSON request payload to create a new dataset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to creating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetAsync(String trOrganization, CreateDatasetRequest createDatasetRequest, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(trOrganization, createDatasetRequest, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataset
     * @param trOrganization The organization id to use for the request (required)
     * @param deleteDatasetRequest JSON request payload to delete a dataset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetCall(String trOrganization, DeleteDatasetRequest deleteDatasetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDatasetRequest;

        // create path and map variables
        String localVarPath = "/api/dataset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetValidateBeforeCall(String trOrganization, DeleteDatasetRequest deleteDatasetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling deleteDataset(Async)");
        }

        // verify the required parameter 'deleteDatasetRequest' is set
        if (deleteDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteDatasetRequest' when calling deleteDataset(Async)");
        }

        return deleteDatasetCall(trOrganization, deleteDatasetRequest, _callback);

    }

    /**
     * Delete Dataset
     * Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param deleteDatasetRequest JSON request payload to delete a dataset (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the dataset </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDataset(String trOrganization, DeleteDatasetRequest deleteDatasetRequest) throws ApiException {
        deleteDatasetWithHttpInfo(trOrganization, deleteDatasetRequest);
    }

    /**
     * Delete Dataset
     * Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param deleteDatasetRequest JSON request payload to delete a dataset (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the dataset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDatasetWithHttpInfo( @NotNull String trOrganization,  @NotNull DeleteDatasetRequest deleteDatasetRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(trOrganization, deleteDatasetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Dataset (asynchronously)
     * Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param deleteDatasetRequest JSON request payload to delete a dataset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to deleting the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAsync(String trOrganization, DeleteDatasetRequest deleteDatasetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(trOrganization, deleteDatasetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClientDatasetConfig
     * @param trDataset The dataset id to use for the request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset environment variables </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset. Typically this only happens when your auth credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientDatasetConfigCall(String trDataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/envs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientDatasetConfigValidateBeforeCall(String trDataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling getClientDatasetConfig(Async)");
        }

        return getClientDatasetConfigCall(trDataset, _callback);

    }

    /**
     * Get Client Configuration
     * Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
     * @param trDataset The dataset id to use for the request (required)
     * @return ClientDatasetConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset environment variables </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset. Typically this only happens when your auth credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ClientDatasetConfiguration getClientDatasetConfig(String trDataset) throws ApiException {
        ApiResponse<ClientDatasetConfiguration> localVarResp = getClientDatasetConfigWithHttpInfo(trDataset);
        return localVarResp.getData();
    }

    /**
     * Get Client Configuration
     * Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
     * @param trDataset The dataset id to use for the request (required)
     * @return ApiResponse&lt;ClientDatasetConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset environment variables </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset. Typically this only happens when your auth credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientDatasetConfiguration> getClientDatasetConfigWithHttpInfo( @NotNull String trDataset) throws ApiException {
        okhttp3.Call localVarCall = getClientDatasetConfigValidateBeforeCall(trDataset, null);
        Type localVarReturnType = new TypeToken<ClientDatasetConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Client Configuration (asynchronously)
     * Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
     * @param trDataset The dataset id to use for the request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset environment variables </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset. Typically this only happens when your auth credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientDatasetConfigAsync(String trDataset, final ApiCallback<ClientDatasetConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientDatasetConfigValidateBeforeCall(trDataset, _callback);
        Type localVarReturnType = new TypeToken<ClientDatasetConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataset
     * @param trOrganization The organization id to use for the request (required)
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset you want to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetCall(String trOrganization, String trDataset, UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/{dataset_id}"
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        if (trDataset != null) {
            localVarHeaderParams.put("TR-Dataset", localVarApiClient.parameterToString(trDataset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetValidateBeforeCall(String trOrganization, String trDataset, UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling getDataset(Async)");
        }

        // verify the required parameter 'trDataset' is set
        if (trDataset == null) {
            throw new ApiException("Missing the required parameter 'trDataset' when calling getDataset(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDataset(Async)");
        }

        return getDatasetCall(trOrganization, trDataset, datasetId, _callback);

    }

    /**
     * Get Dataset
     * Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset you want to retrieve. (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public Dataset getDataset(String trOrganization, String trDataset, UUID datasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = getDatasetWithHttpInfo(trOrganization, trDataset, datasetId);
        return localVarResp.getData();
    }

    /**
     * Get Dataset
     * Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset you want to retrieve. (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> getDatasetWithHttpInfo( @NotNull String trOrganization,  @NotNull String trDataset,  @NotNull UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = getDatasetValidateBeforeCall(trOrganization, trDataset, datasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Dataset (asynchronously)
     * Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param trDataset The dataset id to use for the request (required)
     * @param datasetId The id of the dataset you want to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetAsync(String trOrganization, String trDataset, UUID datasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetValidateBeforeCall(trOrganization, trDataset, datasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetsFromOrganization
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId id of the organization you want to retrieve datasets for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetsFromOrganizationCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/organization/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetsFromOrganizationValidateBeforeCall(String trOrganization, UUID organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling getDatasetsFromOrganization(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getDatasetsFromOrganization(Async)");
        }

        return getDatasetsFromOrganizationCall(trOrganization, organizationId, _callback);

    }

    /**
     * Get Datasets from Organization
     * Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId id of the organization you want to retrieve datasets for (required)
     * @return List&lt;DatasetAndUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public List<DatasetAndUsage> getDatasetsFromOrganization(String trOrganization, UUID organizationId) throws ApiException {
        ApiResponse<List<DatasetAndUsage>> localVarResp = getDatasetsFromOrganizationWithHttpInfo(trOrganization, organizationId);
        return localVarResp.getData();
    }

    /**
     * Get Datasets from Organization
     * Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId id of the organization you want to retrieve datasets for (required)
     * @return ApiResponse&lt;List&lt;DatasetAndUsage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DatasetAndUsage>> getDatasetsFromOrganizationWithHttpInfo( @NotNull String trOrganization,  @NotNull UUID organizationId) throws ApiException {
        okhttp3.Call localVarCall = getDatasetsFromOrganizationValidateBeforeCall(trOrganization, organizationId, null);
        Type localVarReturnType = new TypeToken<List<DatasetAndUsage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Datasets from Organization (asynchronously)
     * Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
     * @param trOrganization The organization id to use for the request (required)
     * @param organizationId id of the organization you want to retrieve datasets for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to retrieving the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetsFromOrganizationAsync(String trOrganization, UUID organizationId, final ApiCallback<List<DatasetAndUsage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetsFromOrganizationValidateBeforeCall(trOrganization, organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<DatasetAndUsage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDataset
     * @param trOrganization The organization id to use for the request (required)
     * @param updateDatasetRequest JSON request payload to update a dataset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetCall(String trOrganization, UpdateDatasetRequest updateDatasetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDatasetRequest;

        // create path and map variables
        String localVarPath = "/api/dataset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trOrganization != null) {
            localVarHeaderParams.put("TR-Organization", localVarApiClient.parameterToString(trOrganization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetValidateBeforeCall(String trOrganization, UpdateDatasetRequest updateDatasetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trOrganization' is set
        if (trOrganization == null) {
            throw new ApiException("Missing the required parameter 'trOrganization' when calling updateDataset(Async)");
        }

        // verify the required parameter 'updateDatasetRequest' is set
        if (updateDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDatasetRequest' when calling updateDataset(Async)");
        }

        return updateDatasetCall(trOrganization, updateDatasetRequest, _callback);

    }

    /**
     * Update Dataset
     * Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param updateDatasetRequest JSON request payload to update a dataset (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public Dataset updateDataset(String trOrganization, UpdateDatasetRequest updateDatasetRequest) throws ApiException {
        ApiResponse<Dataset> localVarResp = updateDatasetWithHttpInfo(trOrganization, updateDatasetRequest);
        return localVarResp.getData();
    }

    /**
     * Update Dataset
     * Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param updateDatasetRequest JSON request payload to update a dataset (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> updateDatasetWithHttpInfo( @NotNull String trOrganization,  @NotNull UpdateDatasetRequest updateDatasetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetValidateBeforeCall(trOrganization, updateDatasetRequest, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Dataset (asynchronously)
     * Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
     * @param trOrganization The organization id to use for the request (required)
     * @param updateDatasetRequest JSON request payload to update a dataset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service error relating to updating the dataset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAsync(String trOrganization, UpdateDatasetRequest updateDatasetRequest, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetValidateBeforeCall(trOrganization, updateDatasetRequest, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
